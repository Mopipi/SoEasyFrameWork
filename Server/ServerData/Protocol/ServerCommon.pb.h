// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerCommon.proto

#ifndef PROTOBUF_INCLUDED_ServerCommon_2eproto
#define PROTOBUF_INCLUDED_ServerCommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ServerCommon_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_ServerCommon_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_ServerCommon_2eproto();
namespace PB {
class ActionUpdateInfo;
class ActionUpdateInfoDefaultTypeInternal;
extern ActionUpdateInfoDefaultTypeInternal _ActionUpdateInfo_default_instance_;
class AreaActionInfo;
class AreaActionInfoDefaultTypeInternal;
extern AreaActionInfoDefaultTypeInternal _AreaActionInfo_default_instance_;
class AreaActionInfo_ActionInfo;
class AreaActionInfo_ActionInfoDefaultTypeInternal;
extern AreaActionInfo_ActionInfoDefaultTypeInternal _AreaActionInfo_ActionInfo_default_instance_;
class AssestCompareList;
class AssestCompareListDefaultTypeInternal;
extern AssestCompareListDefaultTypeInternal _AssestCompareList_default_instance_;
class AssestCompareList_AssestCompareInfo;
class AssestCompareList_AssestCompareInfoDefaultTypeInternal;
extern AssestCompareList_AssestCompareInfoDefaultTypeInternal _AssestCompareList_AssestCompareInfo_default_instance_;
class LogicServerData;
class LogicServerDataDefaultTypeInternal;
extern LogicServerDataDefaultTypeInternal _LogicServerData_default_instance_;
class LogicServerListData;
class LogicServerListDataDefaultTypeInternal;
extern LogicServerListDataDefaultTypeInternal _LogicServerListData_default_instance_;
class ServerRegisterBack;
class ServerRegisterBackDefaultTypeInternal;
extern ServerRegisterBackDefaultTypeInternal _ServerRegisterBack_default_instance_;
class ServerRunInfo;
class ServerRunInfoDefaultTypeInternal;
extern ServerRunInfoDefaultTypeInternal _ServerRunInfo_default_instance_;
class TransferAssestInfo;
class TransferAssestInfoDefaultTypeInternal;
extern TransferAssestInfoDefaultTypeInternal _TransferAssestInfo_default_instance_;
}  // namespace PB
namespace google {
namespace protobuf {
template<> ::PB::ActionUpdateInfo* Arena::CreateMaybeMessage<::PB::ActionUpdateInfo>(Arena*);
template<> ::PB::AreaActionInfo* Arena::CreateMaybeMessage<::PB::AreaActionInfo>(Arena*);
template<> ::PB::AreaActionInfo_ActionInfo* Arena::CreateMaybeMessage<::PB::AreaActionInfo_ActionInfo>(Arena*);
template<> ::PB::AssestCompareList* Arena::CreateMaybeMessage<::PB::AssestCompareList>(Arena*);
template<> ::PB::AssestCompareList_AssestCompareInfo* Arena::CreateMaybeMessage<::PB::AssestCompareList_AssestCompareInfo>(Arena*);
template<> ::PB::LogicServerData* Arena::CreateMaybeMessage<::PB::LogicServerData>(Arena*);
template<> ::PB::LogicServerListData* Arena::CreateMaybeMessage<::PB::LogicServerListData>(Arena*);
template<> ::PB::ServerRegisterBack* Arena::CreateMaybeMessage<::PB::ServerRegisterBack>(Arena*);
template<> ::PB::ServerRunInfo* Arena::CreateMaybeMessage<::PB::ServerRunInfo>(Arena*);
template<> ::PB::TransferAssestInfo* Arena::CreateMaybeMessage<::PB::TransferAssestInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace PB {

// ===================================================================

class LogicServerData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PB.LogicServerData) */ {
 public:
  LogicServerData();
  virtual ~LogicServerData();

  LogicServerData(const LogicServerData& from);

  inline LogicServerData& operator=(const LogicServerData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogicServerData(LogicServerData&& from) noexcept
    : LogicServerData() {
    *this = ::std::move(from);
  }

  inline LogicServerData& operator=(LogicServerData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LogicServerData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogicServerData* internal_default_instance() {
    return reinterpret_cast<const LogicServerData*>(
               &_LogicServerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LogicServerData* other);
  friend void swap(LogicServerData& a, LogicServerData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogicServerData* New() const final {
    return CreateMaybeMessage<LogicServerData>(nullptr);
  }

  LogicServerData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogicServerData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogicServerData& from);
  void MergeFrom(const LogicServerData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogicServerData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server_name = 2;
  void clear_server_name();
  static const int kServerNameFieldNumber = 2;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // string server_ip = 3;
  void clear_server_ip();
  static const int kServerIpFieldNumber = 3;
  const ::std::string& server_ip() const;
  void set_server_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_server_ip(::std::string&& value);
  #endif
  void set_server_ip(const char* value);
  void set_server_ip(const char* value, size_t size);
  ::std::string* mutable_server_ip();
  ::std::string* release_server_ip();
  void set_allocated_server_ip(::std::string* server_ip);

  // string server_token = 5;
  void clear_server_token();
  static const int kServerTokenFieldNumber = 5;
  const ::std::string& server_token() const;
  void set_server_token(const ::std::string& value);
  #if LANG_CXX11
  void set_server_token(::std::string&& value);
  #endif
  void set_server_token(const char* value);
  void set_server_token(const char* value, size_t size);
  ::std::string* mutable_server_token();
  ::std::string* release_server_token();
  void set_allocated_server_token(::std::string* server_token);

  // int32 area_id = 1;
  void clear_area_id();
  static const int kAreaIdFieldNumber = 1;
  ::google::protobuf::int32 area_id() const;
  void set_area_id(::google::protobuf::int32 value);

  // int32 server_port = 4;
  void clear_server_port();
  static const int kServerPortFieldNumber = 4;
  ::google::protobuf::int32 server_port() const;
  void set_server_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.LogicServerData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::internal::ArenaStringPtr server_ip_;
  ::google::protobuf::internal::ArenaStringPtr server_token_;
  ::google::protobuf::int32 area_id_;
  ::google::protobuf::int32 server_port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerCommon_2eproto;
};
// -------------------------------------------------------------------

class LogicServerListData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PB.LogicServerListData) */ {
 public:
  LogicServerListData();
  virtual ~LogicServerListData();

  LogicServerListData(const LogicServerListData& from);

  inline LogicServerListData& operator=(const LogicServerListData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogicServerListData(LogicServerListData&& from) noexcept
    : LogicServerListData() {
    *this = ::std::move(from);
  }

  inline LogicServerListData& operator=(LogicServerListData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LogicServerListData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogicServerListData* internal_default_instance() {
    return reinterpret_cast<const LogicServerListData*>(
               &_LogicServerListData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LogicServerListData* other);
  friend void swap(LogicServerListData& a, LogicServerListData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogicServerListData* New() const final {
    return CreateMaybeMessage<LogicServerListData>(nullptr);
  }

  LogicServerListData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogicServerListData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogicServerListData& from);
  void MergeFrom(const LogicServerListData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogicServerListData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .PB.LogicServerData server_data = 1;
  bool has_server_data() const;
  void clear_server_data();
  static const int kServerDataFieldNumber = 1;
  const ::PB::LogicServerData& server_data() const;
  ::PB::LogicServerData* release_server_data();
  ::PB::LogicServerData* mutable_server_data();
  void set_allocated_server_data(::PB::LogicServerData* server_data);

  // @@protoc_insertion_point(class_scope:PB.LogicServerListData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::PB::LogicServerData* server_data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerCommon_2eproto;
};
// -------------------------------------------------------------------

class ServerRegisterBack :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PB.ServerRegisterBack) */ {
 public:
  ServerRegisterBack();
  virtual ~ServerRegisterBack();

  ServerRegisterBack(const ServerRegisterBack& from);

  inline ServerRegisterBack& operator=(const ServerRegisterBack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerRegisterBack(ServerRegisterBack&& from) noexcept
    : ServerRegisterBack() {
    *this = ::std::move(from);
  }

  inline ServerRegisterBack& operator=(ServerRegisterBack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ServerRegisterBack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerRegisterBack* internal_default_instance() {
    return reinterpret_cast<const ServerRegisterBack*>(
               &_ServerRegisterBack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ServerRegisterBack* other);
  friend void swap(ServerRegisterBack& a, ServerRegisterBack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerRegisterBack* New() const final {
    return CreateMaybeMessage<ServerRegisterBack>(nullptr);
  }

  ServerRegisterBack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerRegisterBack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerRegisterBack& from);
  void MergeFrom(const ServerRegisterBack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerRegisterBack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.LogicServerData logic_srv_list = 1;
  int logic_srv_list_size() const;
  void clear_logic_srv_list();
  static const int kLogicSrvListFieldNumber = 1;
  ::PB::LogicServerData* mutable_logic_srv_list(int index);
  ::google::protobuf::RepeatedPtrField< ::PB::LogicServerData >*
      mutable_logic_srv_list();
  const ::PB::LogicServerData& logic_srv_list(int index) const;
  ::PB::LogicServerData* add_logic_srv_list();
  const ::google::protobuf::RepeatedPtrField< ::PB::LogicServerData >&
      logic_srv_list() const;

  // @@protoc_insertion_point(class_scope:PB.ServerRegisterBack)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::PB::LogicServerData > logic_srv_list_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerCommon_2eproto;
};
// -------------------------------------------------------------------

class AssestCompareList_AssestCompareInfo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PB.AssestCompareList.AssestCompareInfo) */ {
 public:
  AssestCompareList_AssestCompareInfo();
  virtual ~AssestCompareList_AssestCompareInfo();

  AssestCompareList_AssestCompareInfo(const AssestCompareList_AssestCompareInfo& from);

  inline AssestCompareList_AssestCompareInfo& operator=(const AssestCompareList_AssestCompareInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AssestCompareList_AssestCompareInfo(AssestCompareList_AssestCompareInfo&& from) noexcept
    : AssestCompareList_AssestCompareInfo() {
    *this = ::std::move(from);
  }

  inline AssestCompareList_AssestCompareInfo& operator=(AssestCompareList_AssestCompareInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AssestCompareList_AssestCompareInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AssestCompareList_AssestCompareInfo* internal_default_instance() {
    return reinterpret_cast<const AssestCompareList_AssestCompareInfo*>(
               &_AssestCompareList_AssestCompareInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AssestCompareList_AssestCompareInfo* other);
  friend void swap(AssestCompareList_AssestCompareInfo& a, AssestCompareList_AssestCompareInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AssestCompareList_AssestCompareInfo* New() const final {
    return CreateMaybeMessage<AssestCompareList_AssestCompareInfo>(nullptr);
  }

  AssestCompareList_AssestCompareInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AssestCompareList_AssestCompareInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AssestCompareList_AssestCompareInfo& from);
  void MergeFrom(const AssestCompareList_AssestCompareInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssestCompareList_AssestCompareInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file_name = 1;
  void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // string file_md5 = 2;
  void clear_file_md5();
  static const int kFileMd5FieldNumber = 2;
  const ::std::string& file_md5() const;
  void set_file_md5(const ::std::string& value);
  #if LANG_CXX11
  void set_file_md5(::std::string&& value);
  #endif
  void set_file_md5(const char* value);
  void set_file_md5(const char* value, size_t size);
  ::std::string* mutable_file_md5();
  ::std::string* release_file_md5();
  void set_allocated_file_md5(::std::string* file_md5);

  // @@protoc_insertion_point(class_scope:PB.AssestCompareList.AssestCompareInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  ::google::protobuf::internal::ArenaStringPtr file_md5_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerCommon_2eproto;
};
// -------------------------------------------------------------------

class AssestCompareList :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PB.AssestCompareList) */ {
 public:
  AssestCompareList();
  virtual ~AssestCompareList();

  AssestCompareList(const AssestCompareList& from);

  inline AssestCompareList& operator=(const AssestCompareList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AssestCompareList(AssestCompareList&& from) noexcept
    : AssestCompareList() {
    *this = ::std::move(from);
  }

  inline AssestCompareList& operator=(AssestCompareList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AssestCompareList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AssestCompareList* internal_default_instance() {
    return reinterpret_cast<const AssestCompareList*>(
               &_AssestCompareList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(AssestCompareList* other);
  friend void swap(AssestCompareList& a, AssestCompareList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AssestCompareList* New() const final {
    return CreateMaybeMessage<AssestCompareList>(nullptr);
  }

  AssestCompareList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AssestCompareList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AssestCompareList& from);
  void MergeFrom(const AssestCompareList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssestCompareList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AssestCompareList_AssestCompareInfo AssestCompareInfo;

  // accessors -------------------------------------------------------

  // repeated .PB.AssestCompareList.AssestCompareInfo assestList = 1;
  int assestlist_size() const;
  void clear_assestlist();
  static const int kAssestListFieldNumber = 1;
  ::PB::AssestCompareList_AssestCompareInfo* mutable_assestlist(int index);
  ::google::protobuf::RepeatedPtrField< ::PB::AssestCompareList_AssestCompareInfo >*
      mutable_assestlist();
  const ::PB::AssestCompareList_AssestCompareInfo& assestlist(int index) const;
  ::PB::AssestCompareList_AssestCompareInfo* add_assestlist();
  const ::google::protobuf::RepeatedPtrField< ::PB::AssestCompareList_AssestCompareInfo >&
      assestlist() const;

  // @@protoc_insertion_point(class_scope:PB.AssestCompareList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::PB::AssestCompareList_AssestCompareInfo > assestlist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerCommon_2eproto;
};
// -------------------------------------------------------------------

class TransferAssestInfo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PB.TransferAssestInfo) */ {
 public:
  TransferAssestInfo();
  virtual ~TransferAssestInfo();

  TransferAssestInfo(const TransferAssestInfo& from);

  inline TransferAssestInfo& operator=(const TransferAssestInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransferAssestInfo(TransferAssestInfo&& from) noexcept
    : TransferAssestInfo() {
    *this = ::std::move(from);
  }

  inline TransferAssestInfo& operator=(TransferAssestInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TransferAssestInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferAssestInfo* internal_default_instance() {
    return reinterpret_cast<const TransferAssestInfo*>(
               &_TransferAssestInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(TransferAssestInfo* other);
  friend void swap(TransferAssestInfo& a, TransferAssestInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransferAssestInfo* New() const final {
    return CreateMaybeMessage<TransferAssestInfo>(nullptr);
  }

  TransferAssestInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransferAssestInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransferAssestInfo& from);
  void MergeFrom(const TransferAssestInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferAssestInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file_name = 1;
  void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // bytes file_content = 2;
  void clear_file_content();
  static const int kFileContentFieldNumber = 2;
  const ::std::string& file_content() const;
  void set_file_content(const ::std::string& value);
  #if LANG_CXX11
  void set_file_content(::std::string&& value);
  #endif
  void set_file_content(const char* value);
  void set_file_content(const void* value, size_t size);
  ::std::string* mutable_file_content();
  ::std::string* release_file_content();
  void set_allocated_file_content(::std::string* file_content);

  // @@protoc_insertion_point(class_scope:PB.TransferAssestInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  ::google::protobuf::internal::ArenaStringPtr file_content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerCommon_2eproto;
};
// -------------------------------------------------------------------

class ServerRunInfo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PB.ServerRunInfo) */ {
 public:
  ServerRunInfo();
  virtual ~ServerRunInfo();

  ServerRunInfo(const ServerRunInfo& from);

  inline ServerRunInfo& operator=(const ServerRunInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerRunInfo(ServerRunInfo&& from) noexcept
    : ServerRunInfo() {
    *this = ::std::move(from);
  }

  inline ServerRunInfo& operator=(ServerRunInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ServerRunInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerRunInfo* internal_default_instance() {
    return reinterpret_cast<const ServerRunInfo*>(
               &_ServerRunInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ServerRunInfo* other);
  friend void swap(ServerRunInfo& a, ServerRunInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerRunInfo* New() const final {
    return CreateMaybeMessage<ServerRunInfo>(nullptr);
  }

  ServerRunInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerRunInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerRunInfo& from);
  void MergeFrom(const ServerRunInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerRunInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server_name = 1;
  void clear_server_name();
  static const int kServerNameFieldNumber = 1;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // int64 server_run_time = 3;
  void clear_server_run_time();
  static const int kServerRunTimeFieldNumber = 3;
  ::google::protobuf::int64 server_run_time() const;
  void set_server_run_time(::google::protobuf::int64 value);

  // int32 server_areaId = 2;
  void clear_server_areaid();
  static const int kServerAreaIdFieldNumber = 2;
  ::google::protobuf::int32 server_areaid() const;
  void set_server_areaid(::google::protobuf::int32 value);

  // float server_fps = 4;
  void clear_server_fps();
  static const int kServerFpsFieldNumber = 4;
  float server_fps() const;
  void set_server_fps(float value);

  // float logic_time = 5;
  void clear_logic_time();
  static const int kLogicTimeFieldNumber = 5;
  float logic_time() const;
  void set_logic_time(float value);

  // @@protoc_insertion_point(class_scope:PB.ServerRunInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::int64 server_run_time_;
  ::google::protobuf::int32 server_areaid_;
  float server_fps_;
  float logic_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerCommon_2eproto;
};
// -------------------------------------------------------------------

class ActionUpdateInfo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PB.ActionUpdateInfo) */ {
 public:
  ActionUpdateInfo();
  virtual ~ActionUpdateInfo();

  ActionUpdateInfo(const ActionUpdateInfo& from);

  inline ActionUpdateInfo& operator=(const ActionUpdateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActionUpdateInfo(ActionUpdateInfo&& from) noexcept
    : ActionUpdateInfo() {
    *this = ::std::move(from);
  }

  inline ActionUpdateInfo& operator=(ActionUpdateInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ActionUpdateInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActionUpdateInfo* internal_default_instance() {
    return reinterpret_cast<const ActionUpdateInfo*>(
               &_ActionUpdateInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ActionUpdateInfo* other);
  friend void swap(ActionUpdateInfo& a, ActionUpdateInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActionUpdateInfo* New() const final {
    return CreateMaybeMessage<ActionUpdateInfo>(nullptr);
  }

  ActionUpdateInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ActionUpdateInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ActionUpdateInfo& from);
  void MergeFrom(const ActionUpdateInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionUpdateInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string action_names = 2;
  int action_names_size() const;
  void clear_action_names();
  static const int kActionNamesFieldNumber = 2;
  const ::std::string& action_names(int index) const;
  ::std::string* mutable_action_names(int index);
  void set_action_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_action_names(int index, ::std::string&& value);
  #endif
  void set_action_names(int index, const char* value);
  void set_action_names(int index, const char* value, size_t size);
  ::std::string* add_action_names();
  void add_action_names(const ::std::string& value);
  #if LANG_CXX11
  void add_action_names(::std::string&& value);
  #endif
  void add_action_names(const char* value);
  void add_action_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& action_names() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_action_names();

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:PB.ActionUpdateInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> action_names_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerCommon_2eproto;
};
// -------------------------------------------------------------------

class AreaActionInfo_ActionInfo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PB.AreaActionInfo.ActionInfo) */ {
 public:
  AreaActionInfo_ActionInfo();
  virtual ~AreaActionInfo_ActionInfo();

  AreaActionInfo_ActionInfo(const AreaActionInfo_ActionInfo& from);

  inline AreaActionInfo_ActionInfo& operator=(const AreaActionInfo_ActionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AreaActionInfo_ActionInfo(AreaActionInfo_ActionInfo&& from) noexcept
    : AreaActionInfo_ActionInfo() {
    *this = ::std::move(from);
  }

  inline AreaActionInfo_ActionInfo& operator=(AreaActionInfo_ActionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AreaActionInfo_ActionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AreaActionInfo_ActionInfo* internal_default_instance() {
    return reinterpret_cast<const AreaActionInfo_ActionInfo*>(
               &_AreaActionInfo_ActionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(AreaActionInfo_ActionInfo* other);
  friend void swap(AreaActionInfo_ActionInfo& a, AreaActionInfo_ActionInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AreaActionInfo_ActionInfo* New() const final {
    return CreateMaybeMessage<AreaActionInfo_ActionInfo>(nullptr);
  }

  AreaActionInfo_ActionInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AreaActionInfo_ActionInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AreaActionInfo_ActionInfo& from);
  void MergeFrom(const AreaActionInfo_ActionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AreaActionInfo_ActionInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string action_address = 2;
  int action_address_size() const;
  void clear_action_address();
  static const int kActionAddressFieldNumber = 2;
  const ::std::string& action_address(int index) const;
  ::std::string* mutable_action_address(int index);
  void set_action_address(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_action_address(int index, ::std::string&& value);
  #endif
  void set_action_address(int index, const char* value);
  void set_action_address(int index, const char* value, size_t size);
  ::std::string* add_action_address();
  void add_action_address(const ::std::string& value);
  #if LANG_CXX11
  void add_action_address(::std::string&& value);
  #endif
  void add_action_address(const char* value);
  void add_action_address(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& action_address() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_action_address();

  // string action_name = 1;
  void clear_action_name();
  static const int kActionNameFieldNumber = 1;
  const ::std::string& action_name() const;
  void set_action_name(const ::std::string& value);
  #if LANG_CXX11
  void set_action_name(::std::string&& value);
  #endif
  void set_action_name(const char* value);
  void set_action_name(const char* value, size_t size);
  ::std::string* mutable_action_name();
  ::std::string* release_action_name();
  void set_allocated_action_name(::std::string* action_name);

  // @@protoc_insertion_point(class_scope:PB.AreaActionInfo.ActionInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> action_address_;
  ::google::protobuf::internal::ArenaStringPtr action_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerCommon_2eproto;
};
// -------------------------------------------------------------------

class AreaActionInfo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PB.AreaActionInfo) */ {
 public:
  AreaActionInfo();
  virtual ~AreaActionInfo();

  AreaActionInfo(const AreaActionInfo& from);

  inline AreaActionInfo& operator=(const AreaActionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AreaActionInfo(AreaActionInfo&& from) noexcept
    : AreaActionInfo() {
    *this = ::std::move(from);
  }

  inline AreaActionInfo& operator=(AreaActionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AreaActionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AreaActionInfo* internal_default_instance() {
    return reinterpret_cast<const AreaActionInfo*>(
               &_AreaActionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(AreaActionInfo* other);
  friend void swap(AreaActionInfo& a, AreaActionInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AreaActionInfo* New() const final {
    return CreateMaybeMessage<AreaActionInfo>(nullptr);
  }

  AreaActionInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AreaActionInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AreaActionInfo& from);
  void MergeFrom(const AreaActionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AreaActionInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AreaActionInfo_ActionInfo ActionInfo;

  // accessors -------------------------------------------------------

  // repeated .PB.AreaActionInfo.ActionInfo action_infos = 2;
  int action_infos_size() const;
  void clear_action_infos();
  static const int kActionInfosFieldNumber = 2;
  ::PB::AreaActionInfo_ActionInfo* mutable_action_infos(int index);
  ::google::protobuf::RepeatedPtrField< ::PB::AreaActionInfo_ActionInfo >*
      mutable_action_infos();
  const ::PB::AreaActionInfo_ActionInfo& action_infos(int index) const;
  ::PB::AreaActionInfo_ActionInfo* add_action_infos();
  const ::google::protobuf::RepeatedPtrField< ::PB::AreaActionInfo_ActionInfo >&
      action_infos() const;

  // int32 areaId = 1;
  void clear_areaid();
  static const int kAreaIdFieldNumber = 1;
  ::google::protobuf::int32 areaid() const;
  void set_areaid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.AreaActionInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::PB::AreaActionInfo_ActionInfo > action_infos_;
  ::google::protobuf::int32 areaid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerCommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogicServerData

// int32 area_id = 1;
inline void LogicServerData::clear_area_id() {
  area_id_ = 0;
}
inline ::google::protobuf::int32 LogicServerData::area_id() const {
  // @@protoc_insertion_point(field_get:PB.LogicServerData.area_id)
  return area_id_;
}
inline void LogicServerData::set_area_id(::google::protobuf::int32 value) {
  
  area_id_ = value;
  // @@protoc_insertion_point(field_set:PB.LogicServerData.area_id)
}

// string server_name = 2;
inline void LogicServerData::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogicServerData::server_name() const {
  // @@protoc_insertion_point(field_get:PB.LogicServerData.server_name)
  return server_name_.GetNoArena();
}
inline void LogicServerData::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PB.LogicServerData.server_name)
}
#if LANG_CXX11
inline void LogicServerData::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PB.LogicServerData.server_name)
}
#endif
inline void LogicServerData::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PB.LogicServerData.server_name)
}
inline void LogicServerData::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PB.LogicServerData.server_name)
}
inline ::std::string* LogicServerData::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:PB.LogicServerData.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogicServerData::release_server_name() {
  // @@protoc_insertion_point(field_release:PB.LogicServerData.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogicServerData::set_allocated_server_name(::std::string* server_name) {
  if (server_name != nullptr) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:PB.LogicServerData.server_name)
}

// string server_ip = 3;
inline void LogicServerData::clear_server_ip() {
  server_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogicServerData::server_ip() const {
  // @@protoc_insertion_point(field_get:PB.LogicServerData.server_ip)
  return server_ip_.GetNoArena();
}
inline void LogicServerData::set_server_ip(const ::std::string& value) {
  
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PB.LogicServerData.server_ip)
}
#if LANG_CXX11
inline void LogicServerData::set_server_ip(::std::string&& value) {
  
  server_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PB.LogicServerData.server_ip)
}
#endif
inline void LogicServerData::set_server_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PB.LogicServerData.server_ip)
}
inline void LogicServerData::set_server_ip(const char* value, size_t size) {
  
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PB.LogicServerData.server_ip)
}
inline ::std::string* LogicServerData::mutable_server_ip() {
  
  // @@protoc_insertion_point(field_mutable:PB.LogicServerData.server_ip)
  return server_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogicServerData::release_server_ip() {
  // @@protoc_insertion_point(field_release:PB.LogicServerData.server_ip)
  
  return server_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogicServerData::set_allocated_server_ip(::std::string* server_ip) {
  if (server_ip != nullptr) {
    
  } else {
    
  }
  server_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_ip);
  // @@protoc_insertion_point(field_set_allocated:PB.LogicServerData.server_ip)
}

// int32 server_port = 4;
inline void LogicServerData::clear_server_port() {
  server_port_ = 0;
}
inline ::google::protobuf::int32 LogicServerData::server_port() const {
  // @@protoc_insertion_point(field_get:PB.LogicServerData.server_port)
  return server_port_;
}
inline void LogicServerData::set_server_port(::google::protobuf::int32 value) {
  
  server_port_ = value;
  // @@protoc_insertion_point(field_set:PB.LogicServerData.server_port)
}

// string server_token = 5;
inline void LogicServerData::clear_server_token() {
  server_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogicServerData::server_token() const {
  // @@protoc_insertion_point(field_get:PB.LogicServerData.server_token)
  return server_token_.GetNoArena();
}
inline void LogicServerData::set_server_token(const ::std::string& value) {
  
  server_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PB.LogicServerData.server_token)
}
#if LANG_CXX11
inline void LogicServerData::set_server_token(::std::string&& value) {
  
  server_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PB.LogicServerData.server_token)
}
#endif
inline void LogicServerData::set_server_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PB.LogicServerData.server_token)
}
inline void LogicServerData::set_server_token(const char* value, size_t size) {
  
  server_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PB.LogicServerData.server_token)
}
inline ::std::string* LogicServerData::mutable_server_token() {
  
  // @@protoc_insertion_point(field_mutable:PB.LogicServerData.server_token)
  return server_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogicServerData::release_server_token() {
  // @@protoc_insertion_point(field_release:PB.LogicServerData.server_token)
  
  return server_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogicServerData::set_allocated_server_token(::std::string* server_token) {
  if (server_token != nullptr) {
    
  } else {
    
  }
  server_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_token);
  // @@protoc_insertion_point(field_set_allocated:PB.LogicServerData.server_token)
}

// -------------------------------------------------------------------

// LogicServerListData

// .PB.LogicServerData server_data = 1;
inline bool LogicServerListData::has_server_data() const {
  return this != internal_default_instance() && server_data_ != nullptr;
}
inline void LogicServerListData::clear_server_data() {
  if (GetArenaNoVirtual() == nullptr && server_data_ != nullptr) {
    delete server_data_;
  }
  server_data_ = nullptr;
}
inline const ::PB::LogicServerData& LogicServerListData::server_data() const {
  const ::PB::LogicServerData* p = server_data_;
  // @@protoc_insertion_point(field_get:PB.LogicServerListData.server_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::PB::LogicServerData*>(
      &::PB::_LogicServerData_default_instance_);
}
inline ::PB::LogicServerData* LogicServerListData::release_server_data() {
  // @@protoc_insertion_point(field_release:PB.LogicServerListData.server_data)
  
  ::PB::LogicServerData* temp = server_data_;
  server_data_ = nullptr;
  return temp;
}
inline ::PB::LogicServerData* LogicServerListData::mutable_server_data() {
  
  if (server_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::PB::LogicServerData>(GetArenaNoVirtual());
    server_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:PB.LogicServerListData.server_data)
  return server_data_;
}
inline void LogicServerListData::set_allocated_server_data(::PB::LogicServerData* server_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete server_data_;
  }
  if (server_data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      server_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, server_data, submessage_arena);
    }
    
  } else {
    
  }
  server_data_ = server_data;
  // @@protoc_insertion_point(field_set_allocated:PB.LogicServerListData.server_data)
}

// -------------------------------------------------------------------

// ServerRegisterBack

// repeated .PB.LogicServerData logic_srv_list = 1;
inline int ServerRegisterBack::logic_srv_list_size() const {
  return logic_srv_list_.size();
}
inline void ServerRegisterBack::clear_logic_srv_list() {
  logic_srv_list_.Clear();
}
inline ::PB::LogicServerData* ServerRegisterBack::mutable_logic_srv_list(int index) {
  // @@protoc_insertion_point(field_mutable:PB.ServerRegisterBack.logic_srv_list)
  return logic_srv_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::PB::LogicServerData >*
ServerRegisterBack::mutable_logic_srv_list() {
  // @@protoc_insertion_point(field_mutable_list:PB.ServerRegisterBack.logic_srv_list)
  return &logic_srv_list_;
}
inline const ::PB::LogicServerData& ServerRegisterBack::logic_srv_list(int index) const {
  // @@protoc_insertion_point(field_get:PB.ServerRegisterBack.logic_srv_list)
  return logic_srv_list_.Get(index);
}
inline ::PB::LogicServerData* ServerRegisterBack::add_logic_srv_list() {
  // @@protoc_insertion_point(field_add:PB.ServerRegisterBack.logic_srv_list)
  return logic_srv_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::LogicServerData >&
ServerRegisterBack::logic_srv_list() const {
  // @@protoc_insertion_point(field_list:PB.ServerRegisterBack.logic_srv_list)
  return logic_srv_list_;
}

// -------------------------------------------------------------------

// AssestCompareList_AssestCompareInfo

// string file_name = 1;
inline void AssestCompareList_AssestCompareInfo::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AssestCompareList_AssestCompareInfo::file_name() const {
  // @@protoc_insertion_point(field_get:PB.AssestCompareList.AssestCompareInfo.file_name)
  return file_name_.GetNoArena();
}
inline void AssestCompareList_AssestCompareInfo::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PB.AssestCompareList.AssestCompareInfo.file_name)
}
#if LANG_CXX11
inline void AssestCompareList_AssestCompareInfo::set_file_name(::std::string&& value) {
  
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PB.AssestCompareList.AssestCompareInfo.file_name)
}
#endif
inline void AssestCompareList_AssestCompareInfo::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PB.AssestCompareList.AssestCompareInfo.file_name)
}
inline void AssestCompareList_AssestCompareInfo::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PB.AssestCompareList.AssestCompareInfo.file_name)
}
inline ::std::string* AssestCompareList_AssestCompareInfo::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:PB.AssestCompareList.AssestCompareInfo.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AssestCompareList_AssestCompareInfo::release_file_name() {
  // @@protoc_insertion_point(field_release:PB.AssestCompareList.AssestCompareInfo.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AssestCompareList_AssestCompareInfo::set_allocated_file_name(::std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:PB.AssestCompareList.AssestCompareInfo.file_name)
}

// string file_md5 = 2;
inline void AssestCompareList_AssestCompareInfo::clear_file_md5() {
  file_md5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AssestCompareList_AssestCompareInfo::file_md5() const {
  // @@protoc_insertion_point(field_get:PB.AssestCompareList.AssestCompareInfo.file_md5)
  return file_md5_.GetNoArena();
}
inline void AssestCompareList_AssestCompareInfo::set_file_md5(const ::std::string& value) {
  
  file_md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PB.AssestCompareList.AssestCompareInfo.file_md5)
}
#if LANG_CXX11
inline void AssestCompareList_AssestCompareInfo::set_file_md5(::std::string&& value) {
  
  file_md5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PB.AssestCompareList.AssestCompareInfo.file_md5)
}
#endif
inline void AssestCompareList_AssestCompareInfo::set_file_md5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PB.AssestCompareList.AssestCompareInfo.file_md5)
}
inline void AssestCompareList_AssestCompareInfo::set_file_md5(const char* value, size_t size) {
  
  file_md5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PB.AssestCompareList.AssestCompareInfo.file_md5)
}
inline ::std::string* AssestCompareList_AssestCompareInfo::mutable_file_md5() {
  
  // @@protoc_insertion_point(field_mutable:PB.AssestCompareList.AssestCompareInfo.file_md5)
  return file_md5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AssestCompareList_AssestCompareInfo::release_file_md5() {
  // @@protoc_insertion_point(field_release:PB.AssestCompareList.AssestCompareInfo.file_md5)
  
  return file_md5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AssestCompareList_AssestCompareInfo::set_allocated_file_md5(::std::string* file_md5) {
  if (file_md5 != nullptr) {
    
  } else {
    
  }
  file_md5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_md5);
  // @@protoc_insertion_point(field_set_allocated:PB.AssestCompareList.AssestCompareInfo.file_md5)
}

// -------------------------------------------------------------------

// AssestCompareList

// repeated .PB.AssestCompareList.AssestCompareInfo assestList = 1;
inline int AssestCompareList::assestlist_size() const {
  return assestlist_.size();
}
inline void AssestCompareList::clear_assestlist() {
  assestlist_.Clear();
}
inline ::PB::AssestCompareList_AssestCompareInfo* AssestCompareList::mutable_assestlist(int index) {
  // @@protoc_insertion_point(field_mutable:PB.AssestCompareList.assestList)
  return assestlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::PB::AssestCompareList_AssestCompareInfo >*
AssestCompareList::mutable_assestlist() {
  // @@protoc_insertion_point(field_mutable_list:PB.AssestCompareList.assestList)
  return &assestlist_;
}
inline const ::PB::AssestCompareList_AssestCompareInfo& AssestCompareList::assestlist(int index) const {
  // @@protoc_insertion_point(field_get:PB.AssestCompareList.assestList)
  return assestlist_.Get(index);
}
inline ::PB::AssestCompareList_AssestCompareInfo* AssestCompareList::add_assestlist() {
  // @@protoc_insertion_point(field_add:PB.AssestCompareList.assestList)
  return assestlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::AssestCompareList_AssestCompareInfo >&
AssestCompareList::assestlist() const {
  // @@protoc_insertion_point(field_list:PB.AssestCompareList.assestList)
  return assestlist_;
}

// -------------------------------------------------------------------

// TransferAssestInfo

// string file_name = 1;
inline void TransferAssestInfo::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferAssestInfo::file_name() const {
  // @@protoc_insertion_point(field_get:PB.TransferAssestInfo.file_name)
  return file_name_.GetNoArena();
}
inline void TransferAssestInfo::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PB.TransferAssestInfo.file_name)
}
#if LANG_CXX11
inline void TransferAssestInfo::set_file_name(::std::string&& value) {
  
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PB.TransferAssestInfo.file_name)
}
#endif
inline void TransferAssestInfo::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PB.TransferAssestInfo.file_name)
}
inline void TransferAssestInfo::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PB.TransferAssestInfo.file_name)
}
inline ::std::string* TransferAssestInfo::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:PB.TransferAssestInfo.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferAssestInfo::release_file_name() {
  // @@protoc_insertion_point(field_release:PB.TransferAssestInfo.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferAssestInfo::set_allocated_file_name(::std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:PB.TransferAssestInfo.file_name)
}

// bytes file_content = 2;
inline void TransferAssestInfo::clear_file_content() {
  file_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferAssestInfo::file_content() const {
  // @@protoc_insertion_point(field_get:PB.TransferAssestInfo.file_content)
  return file_content_.GetNoArena();
}
inline void TransferAssestInfo::set_file_content(const ::std::string& value) {
  
  file_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PB.TransferAssestInfo.file_content)
}
#if LANG_CXX11
inline void TransferAssestInfo::set_file_content(::std::string&& value) {
  
  file_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PB.TransferAssestInfo.file_content)
}
#endif
inline void TransferAssestInfo::set_file_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PB.TransferAssestInfo.file_content)
}
inline void TransferAssestInfo::set_file_content(const void* value, size_t size) {
  
  file_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PB.TransferAssestInfo.file_content)
}
inline ::std::string* TransferAssestInfo::mutable_file_content() {
  
  // @@protoc_insertion_point(field_mutable:PB.TransferAssestInfo.file_content)
  return file_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferAssestInfo::release_file_content() {
  // @@protoc_insertion_point(field_release:PB.TransferAssestInfo.file_content)
  
  return file_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferAssestInfo::set_allocated_file_content(::std::string* file_content) {
  if (file_content != nullptr) {
    
  } else {
    
  }
  file_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_content);
  // @@protoc_insertion_point(field_set_allocated:PB.TransferAssestInfo.file_content)
}

// -------------------------------------------------------------------

// ServerRunInfo

// string server_name = 1;
inline void ServerRunInfo::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerRunInfo::server_name() const {
  // @@protoc_insertion_point(field_get:PB.ServerRunInfo.server_name)
  return server_name_.GetNoArena();
}
inline void ServerRunInfo::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PB.ServerRunInfo.server_name)
}
#if LANG_CXX11
inline void ServerRunInfo::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PB.ServerRunInfo.server_name)
}
#endif
inline void ServerRunInfo::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PB.ServerRunInfo.server_name)
}
inline void ServerRunInfo::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PB.ServerRunInfo.server_name)
}
inline ::std::string* ServerRunInfo::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:PB.ServerRunInfo.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerRunInfo::release_server_name() {
  // @@protoc_insertion_point(field_release:PB.ServerRunInfo.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerRunInfo::set_allocated_server_name(::std::string* server_name) {
  if (server_name != nullptr) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:PB.ServerRunInfo.server_name)
}

// int32 server_areaId = 2;
inline void ServerRunInfo::clear_server_areaid() {
  server_areaid_ = 0;
}
inline ::google::protobuf::int32 ServerRunInfo::server_areaid() const {
  // @@protoc_insertion_point(field_get:PB.ServerRunInfo.server_areaId)
  return server_areaid_;
}
inline void ServerRunInfo::set_server_areaid(::google::protobuf::int32 value) {
  
  server_areaid_ = value;
  // @@protoc_insertion_point(field_set:PB.ServerRunInfo.server_areaId)
}

// int64 server_run_time = 3;
inline void ServerRunInfo::clear_server_run_time() {
  server_run_time_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 ServerRunInfo::server_run_time() const {
  // @@protoc_insertion_point(field_get:PB.ServerRunInfo.server_run_time)
  return server_run_time_;
}
inline void ServerRunInfo::set_server_run_time(::google::protobuf::int64 value) {
  
  server_run_time_ = value;
  // @@protoc_insertion_point(field_set:PB.ServerRunInfo.server_run_time)
}

// float server_fps = 4;
inline void ServerRunInfo::clear_server_fps() {
  server_fps_ = 0;
}
inline float ServerRunInfo::server_fps() const {
  // @@protoc_insertion_point(field_get:PB.ServerRunInfo.server_fps)
  return server_fps_;
}
inline void ServerRunInfo::set_server_fps(float value) {
  
  server_fps_ = value;
  // @@protoc_insertion_point(field_set:PB.ServerRunInfo.server_fps)
}

// float logic_time = 5;
inline void ServerRunInfo::clear_logic_time() {
  logic_time_ = 0;
}
inline float ServerRunInfo::logic_time() const {
  // @@protoc_insertion_point(field_get:PB.ServerRunInfo.logic_time)
  return logic_time_;
}
inline void ServerRunInfo::set_logic_time(float value) {
  
  logic_time_ = value;
  // @@protoc_insertion_point(field_set:PB.ServerRunInfo.logic_time)
}

// -------------------------------------------------------------------

// ActionUpdateInfo

// string address = 1;
inline void ActionUpdateInfo::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ActionUpdateInfo::address() const {
  // @@protoc_insertion_point(field_get:PB.ActionUpdateInfo.address)
  return address_.GetNoArena();
}
inline void ActionUpdateInfo::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PB.ActionUpdateInfo.address)
}
#if LANG_CXX11
inline void ActionUpdateInfo::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PB.ActionUpdateInfo.address)
}
#endif
inline void ActionUpdateInfo::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PB.ActionUpdateInfo.address)
}
inline void ActionUpdateInfo::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PB.ActionUpdateInfo.address)
}
inline ::std::string* ActionUpdateInfo::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:PB.ActionUpdateInfo.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ActionUpdateInfo::release_address() {
  // @@protoc_insertion_point(field_release:PB.ActionUpdateInfo.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActionUpdateInfo::set_allocated_address(::std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:PB.ActionUpdateInfo.address)
}

// repeated string action_names = 2;
inline int ActionUpdateInfo::action_names_size() const {
  return action_names_.size();
}
inline void ActionUpdateInfo::clear_action_names() {
  action_names_.Clear();
}
inline const ::std::string& ActionUpdateInfo::action_names(int index) const {
  // @@protoc_insertion_point(field_get:PB.ActionUpdateInfo.action_names)
  return action_names_.Get(index);
}
inline ::std::string* ActionUpdateInfo::mutable_action_names(int index) {
  // @@protoc_insertion_point(field_mutable:PB.ActionUpdateInfo.action_names)
  return action_names_.Mutable(index);
}
inline void ActionUpdateInfo::set_action_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PB.ActionUpdateInfo.action_names)
  action_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ActionUpdateInfo::set_action_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:PB.ActionUpdateInfo.action_names)
  action_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ActionUpdateInfo::set_action_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  action_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PB.ActionUpdateInfo.action_names)
}
inline void ActionUpdateInfo::set_action_names(int index, const char* value, size_t size) {
  action_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PB.ActionUpdateInfo.action_names)
}
inline ::std::string* ActionUpdateInfo::add_action_names() {
  // @@protoc_insertion_point(field_add_mutable:PB.ActionUpdateInfo.action_names)
  return action_names_.Add();
}
inline void ActionUpdateInfo::add_action_names(const ::std::string& value) {
  action_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PB.ActionUpdateInfo.action_names)
}
#if LANG_CXX11
inline void ActionUpdateInfo::add_action_names(::std::string&& value) {
  action_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PB.ActionUpdateInfo.action_names)
}
#endif
inline void ActionUpdateInfo::add_action_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  action_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PB.ActionUpdateInfo.action_names)
}
inline void ActionUpdateInfo::add_action_names(const char* value, size_t size) {
  action_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PB.ActionUpdateInfo.action_names)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
ActionUpdateInfo::action_names() const {
  // @@protoc_insertion_point(field_list:PB.ActionUpdateInfo.action_names)
  return action_names_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
ActionUpdateInfo::mutable_action_names() {
  // @@protoc_insertion_point(field_mutable_list:PB.ActionUpdateInfo.action_names)
  return &action_names_;
}

// -------------------------------------------------------------------

// AreaActionInfo_ActionInfo

// string action_name = 1;
inline void AreaActionInfo_ActionInfo::clear_action_name() {
  action_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AreaActionInfo_ActionInfo::action_name() const {
  // @@protoc_insertion_point(field_get:PB.AreaActionInfo.ActionInfo.action_name)
  return action_name_.GetNoArena();
}
inline void AreaActionInfo_ActionInfo::set_action_name(const ::std::string& value) {
  
  action_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PB.AreaActionInfo.ActionInfo.action_name)
}
#if LANG_CXX11
inline void AreaActionInfo_ActionInfo::set_action_name(::std::string&& value) {
  
  action_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PB.AreaActionInfo.ActionInfo.action_name)
}
#endif
inline void AreaActionInfo_ActionInfo::set_action_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PB.AreaActionInfo.ActionInfo.action_name)
}
inline void AreaActionInfo_ActionInfo::set_action_name(const char* value, size_t size) {
  
  action_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PB.AreaActionInfo.ActionInfo.action_name)
}
inline ::std::string* AreaActionInfo_ActionInfo::mutable_action_name() {
  
  // @@protoc_insertion_point(field_mutable:PB.AreaActionInfo.ActionInfo.action_name)
  return action_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AreaActionInfo_ActionInfo::release_action_name() {
  // @@protoc_insertion_point(field_release:PB.AreaActionInfo.ActionInfo.action_name)
  
  return action_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AreaActionInfo_ActionInfo::set_allocated_action_name(::std::string* action_name) {
  if (action_name != nullptr) {
    
  } else {
    
  }
  action_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action_name);
  // @@protoc_insertion_point(field_set_allocated:PB.AreaActionInfo.ActionInfo.action_name)
}

// repeated string action_address = 2;
inline int AreaActionInfo_ActionInfo::action_address_size() const {
  return action_address_.size();
}
inline void AreaActionInfo_ActionInfo::clear_action_address() {
  action_address_.Clear();
}
inline const ::std::string& AreaActionInfo_ActionInfo::action_address(int index) const {
  // @@protoc_insertion_point(field_get:PB.AreaActionInfo.ActionInfo.action_address)
  return action_address_.Get(index);
}
inline ::std::string* AreaActionInfo_ActionInfo::mutable_action_address(int index) {
  // @@protoc_insertion_point(field_mutable:PB.AreaActionInfo.ActionInfo.action_address)
  return action_address_.Mutable(index);
}
inline void AreaActionInfo_ActionInfo::set_action_address(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PB.AreaActionInfo.ActionInfo.action_address)
  action_address_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AreaActionInfo_ActionInfo::set_action_address(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:PB.AreaActionInfo.ActionInfo.action_address)
  action_address_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AreaActionInfo_ActionInfo::set_action_address(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  action_address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PB.AreaActionInfo.ActionInfo.action_address)
}
inline void AreaActionInfo_ActionInfo::set_action_address(int index, const char* value, size_t size) {
  action_address_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PB.AreaActionInfo.ActionInfo.action_address)
}
inline ::std::string* AreaActionInfo_ActionInfo::add_action_address() {
  // @@protoc_insertion_point(field_add_mutable:PB.AreaActionInfo.ActionInfo.action_address)
  return action_address_.Add();
}
inline void AreaActionInfo_ActionInfo::add_action_address(const ::std::string& value) {
  action_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PB.AreaActionInfo.ActionInfo.action_address)
}
#if LANG_CXX11
inline void AreaActionInfo_ActionInfo::add_action_address(::std::string&& value) {
  action_address_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PB.AreaActionInfo.ActionInfo.action_address)
}
#endif
inline void AreaActionInfo_ActionInfo::add_action_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  action_address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PB.AreaActionInfo.ActionInfo.action_address)
}
inline void AreaActionInfo_ActionInfo::add_action_address(const char* value, size_t size) {
  action_address_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PB.AreaActionInfo.ActionInfo.action_address)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
AreaActionInfo_ActionInfo::action_address() const {
  // @@protoc_insertion_point(field_list:PB.AreaActionInfo.ActionInfo.action_address)
  return action_address_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
AreaActionInfo_ActionInfo::mutable_action_address() {
  // @@protoc_insertion_point(field_mutable_list:PB.AreaActionInfo.ActionInfo.action_address)
  return &action_address_;
}

// -------------------------------------------------------------------

// AreaActionInfo

// int32 areaId = 1;
inline void AreaActionInfo::clear_areaid() {
  areaid_ = 0;
}
inline ::google::protobuf::int32 AreaActionInfo::areaid() const {
  // @@protoc_insertion_point(field_get:PB.AreaActionInfo.areaId)
  return areaid_;
}
inline void AreaActionInfo::set_areaid(::google::protobuf::int32 value) {
  
  areaid_ = value;
  // @@protoc_insertion_point(field_set:PB.AreaActionInfo.areaId)
}

// repeated .PB.AreaActionInfo.ActionInfo action_infos = 2;
inline int AreaActionInfo::action_infos_size() const {
  return action_infos_.size();
}
inline void AreaActionInfo::clear_action_infos() {
  action_infos_.Clear();
}
inline ::PB::AreaActionInfo_ActionInfo* AreaActionInfo::mutable_action_infos(int index) {
  // @@protoc_insertion_point(field_mutable:PB.AreaActionInfo.action_infos)
  return action_infos_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::PB::AreaActionInfo_ActionInfo >*
AreaActionInfo::mutable_action_infos() {
  // @@protoc_insertion_point(field_mutable_list:PB.AreaActionInfo.action_infos)
  return &action_infos_;
}
inline const ::PB::AreaActionInfo_ActionInfo& AreaActionInfo::action_infos(int index) const {
  // @@protoc_insertion_point(field_get:PB.AreaActionInfo.action_infos)
  return action_infos_.Get(index);
}
inline ::PB::AreaActionInfo_ActionInfo* AreaActionInfo::add_action_infos() {
  // @@protoc_insertion_point(field_add:PB.AreaActionInfo.action_infos)
  return action_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::AreaActionInfo_ActionInfo >&
AreaActionInfo::action_infos() const {
  // @@protoc_insertion_point(field_list:PB.AreaActionInfo.action_infos)
  return action_infos_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PB

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_ServerCommon_2eproto
