// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerCommon.proto

#ifndef PROTOBUF_INCLUDED_ServerCommon_2eproto
#define PROTOBUF_INCLUDED_ServerCommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ServerCommon_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_ServerCommon_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_ServerCommon_2eproto();
namespace PB {
class LogicServerData;
class LogicServerDataDefaultTypeInternal;
extern LogicServerDataDefaultTypeInternal _LogicServerData_default_instance_;
class LogicServerListData;
class LogicServerListDataDefaultTypeInternal;
extern LogicServerListDataDefaultTypeInternal _LogicServerListData_default_instance_;
class ServerRegisterBack;
class ServerRegisterBackDefaultTypeInternal;
extern ServerRegisterBackDefaultTypeInternal _ServerRegisterBack_default_instance_;
class Service;
class ServiceDefaultTypeInternal;
extern ServiceDefaultTypeInternal _Service_default_instance_;
class ServiceData;
class ServiceDataDefaultTypeInternal;
extern ServiceDataDefaultTypeInternal _ServiceData_default_instance_;
class Service_NodeRegisterRequest;
class Service_NodeRegisterRequestDefaultTypeInternal;
extern Service_NodeRegisterRequestDefaultTypeInternal _Service_NodeRegisterRequest_default_instance_;
class Service_RegisterRequest;
class Service_RegisterRequestDefaultTypeInternal;
extern Service_RegisterRequestDefaultTypeInternal _Service_RegisterRequest_default_instance_;
class Service_RegisterRequest_MServiceMapEntry_DoNotUse;
class Service_RegisterRequest_MServiceMapEntry_DoNotUseDefaultTypeInternal;
extern Service_RegisterRequest_MServiceMapEntry_DoNotUseDefaultTypeInternal _Service_RegisterRequest_MServiceMapEntry_DoNotUse_default_instance_;
class ServicesNotice;
class ServicesNoticeDefaultTypeInternal;
extern ServicesNoticeDefaultTypeInternal _ServicesNotice_default_instance_;
class UserAccountData;
class UserAccountDataDefaultTypeInternal;
extern UserAccountDataDefaultTypeInternal _UserAccountData_default_instance_;
class UserRegisterBack;
class UserRegisterBackDefaultTypeInternal;
extern UserRegisterBackDefaultTypeInternal _UserRegisterBack_default_instance_;
class UserRegisterData;
class UserRegisterDataDefaultTypeInternal;
extern UserRegisterDataDefaultTypeInternal _UserRegisterData_default_instance_;
}  // namespace PB
namespace google {
namespace protobuf {
template<> ::PB::LogicServerData* Arena::CreateMaybeMessage<::PB::LogicServerData>(Arena*);
template<> ::PB::LogicServerListData* Arena::CreateMaybeMessage<::PB::LogicServerListData>(Arena*);
template<> ::PB::ServerRegisterBack* Arena::CreateMaybeMessage<::PB::ServerRegisterBack>(Arena*);
template<> ::PB::Service* Arena::CreateMaybeMessage<::PB::Service>(Arena*);
template<> ::PB::ServiceData* Arena::CreateMaybeMessage<::PB::ServiceData>(Arena*);
template<> ::PB::Service_NodeRegisterRequest* Arena::CreateMaybeMessage<::PB::Service_NodeRegisterRequest>(Arena*);
template<> ::PB::Service_RegisterRequest* Arena::CreateMaybeMessage<::PB::Service_RegisterRequest>(Arena*);
template<> ::PB::Service_RegisterRequest_MServiceMapEntry_DoNotUse* Arena::CreateMaybeMessage<::PB::Service_RegisterRequest_MServiceMapEntry_DoNotUse>(Arena*);
template<> ::PB::ServicesNotice* Arena::CreateMaybeMessage<::PB::ServicesNotice>(Arena*);
template<> ::PB::UserAccountData* Arena::CreateMaybeMessage<::PB::UserAccountData>(Arena*);
template<> ::PB::UserRegisterBack* Arena::CreateMaybeMessage<::PB::UserRegisterBack>(Arena*);
template<> ::PB::UserRegisterData* Arena::CreateMaybeMessage<::PB::UserRegisterData>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace PB {

// ===================================================================

class LogicServerData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PB.LogicServerData) */ {
 public:
  LogicServerData();
  virtual ~LogicServerData();

  LogicServerData(const LogicServerData& from);

  inline LogicServerData& operator=(const LogicServerData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogicServerData(LogicServerData&& from) noexcept
    : LogicServerData() {
    *this = ::std::move(from);
  }

  inline LogicServerData& operator=(LogicServerData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LogicServerData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogicServerData* internal_default_instance() {
    return reinterpret_cast<const LogicServerData*>(
               &_LogicServerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LogicServerData* other);
  friend void swap(LogicServerData& a, LogicServerData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogicServerData* New() const final {
    return CreateMaybeMessage<LogicServerData>(nullptr);
  }

  LogicServerData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogicServerData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogicServerData& from);
  void MergeFrom(const LogicServerData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogicServerData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server_name = 2;
  void clear_server_name();
  static const int kServerNameFieldNumber = 2;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // string server_ip = 3;
  void clear_server_ip();
  static const int kServerIpFieldNumber = 3;
  const ::std::string& server_ip() const;
  void set_server_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_server_ip(::std::string&& value);
  #endif
  void set_server_ip(const char* value);
  void set_server_ip(const char* value, size_t size);
  ::std::string* mutable_server_ip();
  ::std::string* release_server_ip();
  void set_allocated_server_ip(::std::string* server_ip);

  // string server_token = 5;
  void clear_server_token();
  static const int kServerTokenFieldNumber = 5;
  const ::std::string& server_token() const;
  void set_server_token(const ::std::string& value);
  #if LANG_CXX11
  void set_server_token(::std::string&& value);
  #endif
  void set_server_token(const char* value);
  void set_server_token(const char* value, size_t size);
  ::std::string* mutable_server_token();
  ::std::string* release_server_token();
  void set_allocated_server_token(::std::string* server_token);

  // int32 area_id = 1;
  void clear_area_id();
  static const int kAreaIdFieldNumber = 1;
  ::google::protobuf::int32 area_id() const;
  void set_area_id(::google::protobuf::int32 value);

  // int32 server_port = 4;
  void clear_server_port();
  static const int kServerPortFieldNumber = 4;
  ::google::protobuf::int32 server_port() const;
  void set_server_port(::google::protobuf::int32 value);

  // int32 logicAddress = 6;
  void clear_logicaddress();
  static const int kLogicAddressFieldNumber = 6;
  ::google::protobuf::int32 logicaddress() const;
  void set_logicaddress(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.LogicServerData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::internal::ArenaStringPtr server_ip_;
  ::google::protobuf::internal::ArenaStringPtr server_token_;
  ::google::protobuf::int32 area_id_;
  ::google::protobuf::int32 server_port_;
  ::google::protobuf::int32 logicaddress_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerCommon_2eproto;
};
// -------------------------------------------------------------------

class LogicServerListData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PB.LogicServerListData) */ {
 public:
  LogicServerListData();
  virtual ~LogicServerListData();

  LogicServerListData(const LogicServerListData& from);

  inline LogicServerListData& operator=(const LogicServerListData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogicServerListData(LogicServerListData&& from) noexcept
    : LogicServerListData() {
    *this = ::std::move(from);
  }

  inline LogicServerListData& operator=(LogicServerListData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LogicServerListData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogicServerListData* internal_default_instance() {
    return reinterpret_cast<const LogicServerListData*>(
               &_LogicServerListData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LogicServerListData* other);
  friend void swap(LogicServerListData& a, LogicServerListData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogicServerListData* New() const final {
    return CreateMaybeMessage<LogicServerListData>(nullptr);
  }

  LogicServerListData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogicServerListData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogicServerListData& from);
  void MergeFrom(const LogicServerListData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogicServerListData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .PB.LogicServerData server_data = 1;
  bool has_server_data() const;
  void clear_server_data();
  static const int kServerDataFieldNumber = 1;
  const ::PB::LogicServerData& server_data() const;
  ::PB::LogicServerData* release_server_data();
  ::PB::LogicServerData* mutable_server_data();
  void set_allocated_server_data(::PB::LogicServerData* server_data);

  // @@protoc_insertion_point(class_scope:PB.LogicServerListData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::PB::LogicServerData* server_data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerCommon_2eproto;
};
// -------------------------------------------------------------------

class ServerRegisterBack :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PB.ServerRegisterBack) */ {
 public:
  ServerRegisterBack();
  virtual ~ServerRegisterBack();

  ServerRegisterBack(const ServerRegisterBack& from);

  inline ServerRegisterBack& operator=(const ServerRegisterBack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerRegisterBack(ServerRegisterBack&& from) noexcept
    : ServerRegisterBack() {
    *this = ::std::move(from);
  }

  inline ServerRegisterBack& operator=(ServerRegisterBack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ServerRegisterBack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerRegisterBack* internal_default_instance() {
    return reinterpret_cast<const ServerRegisterBack*>(
               &_ServerRegisterBack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ServerRegisterBack* other);
  friend void swap(ServerRegisterBack& a, ServerRegisterBack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerRegisterBack* New() const final {
    return CreateMaybeMessage<ServerRegisterBack>(nullptr);
  }

  ServerRegisterBack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerRegisterBack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerRegisterBack& from);
  void MergeFrom(const ServerRegisterBack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerRegisterBack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.LogicServerData logic_srv_list = 1;
  int logic_srv_list_size() const;
  void clear_logic_srv_list();
  static const int kLogicSrvListFieldNumber = 1;
  ::PB::LogicServerData* mutable_logic_srv_list(int index);
  ::google::protobuf::RepeatedPtrField< ::PB::LogicServerData >*
      mutable_logic_srv_list();
  const ::PB::LogicServerData& logic_srv_list(int index) const;
  ::PB::LogicServerData* add_logic_srv_list();
  const ::google::protobuf::RepeatedPtrField< ::PB::LogicServerData >&
      logic_srv_list() const;

  // @@protoc_insertion_point(class_scope:PB.ServerRegisterBack)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::PB::LogicServerData > logic_srv_list_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerCommon_2eproto;
};
// -------------------------------------------------------------------

class Service_NodeRegisterRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PB.Service.NodeRegisterRequest) */ {
 public:
  Service_NodeRegisterRequest();
  virtual ~Service_NodeRegisterRequest();

  Service_NodeRegisterRequest(const Service_NodeRegisterRequest& from);

  inline Service_NodeRegisterRequest& operator=(const Service_NodeRegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Service_NodeRegisterRequest(Service_NodeRegisterRequest&& from) noexcept
    : Service_NodeRegisterRequest() {
    *this = ::std::move(from);
  }

  inline Service_NodeRegisterRequest& operator=(Service_NodeRegisterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Service_NodeRegisterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Service_NodeRegisterRequest* internal_default_instance() {
    return reinterpret_cast<const Service_NodeRegisterRequest*>(
               &_Service_NodeRegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Service_NodeRegisterRequest* other);
  friend void swap(Service_NodeRegisterRequest& a, Service_NodeRegisterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Service_NodeRegisterRequest* New() const final {
    return CreateMaybeMessage<Service_NodeRegisterRequest>(nullptr);
  }

  Service_NodeRegisterRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Service_NodeRegisterRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Service_NodeRegisterRequest& from);
  void MergeFrom(const Service_NodeRegisterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Service_NodeRegisterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_address = 3;
  void clear_node_address();
  static const int kNodeAddressFieldNumber = 3;
  const ::std::string& node_address() const;
  void set_node_address(const ::std::string& value);
  #if LANG_CXX11
  void set_node_address(::std::string&& value);
  #endif
  void set_node_address(const char* value);
  void set_node_address(const char* value, size_t size);
  ::std::string* mutable_node_address();
  ::std::string* release_node_address();
  void set_allocated_node_address(::std::string* node_address);

  // int32 area_id = 1;
  void clear_area_id();
  static const int kAreaIdFieldNumber = 1;
  ::google::protobuf::int32 area_id() const;
  void set_area_id(::google::protobuf::int32 value);

  // int32 node_id = 2;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 2;
  ::google::protobuf::int32 node_id() const;
  void set_node_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.Service.NodeRegisterRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr node_address_;
  ::google::protobuf::int32 area_id_;
  ::google::protobuf::int32 node_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerCommon_2eproto;
};
// -------------------------------------------------------------------

class Service_RegisterRequest_MServiceMapEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Service_RegisterRequest_MServiceMapEntry_DoNotUse, 
    ::std::string, ::google::protobuf::int32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<Service_RegisterRequest_MServiceMapEntry_DoNotUse, 
    ::std::string, ::google::protobuf::int32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  Service_RegisterRequest_MServiceMapEntry_DoNotUse();
  Service_RegisterRequest_MServiceMapEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Service_RegisterRequest_MServiceMapEntry_DoNotUse& other);
  static const Service_RegisterRequest_MServiceMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Service_RegisterRequest_MServiceMapEntry_DoNotUse*>(&_Service_RegisterRequest_MServiceMapEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Service_RegisterRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PB.Service.RegisterRequest) */ {
 public:
  Service_RegisterRequest();
  virtual ~Service_RegisterRequest();

  Service_RegisterRequest(const Service_RegisterRequest& from);

  inline Service_RegisterRequest& operator=(const Service_RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Service_RegisterRequest(Service_RegisterRequest&& from) noexcept
    : Service_RegisterRequest() {
    *this = ::std::move(from);
  }

  inline Service_RegisterRequest& operator=(Service_RegisterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Service_RegisterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Service_RegisterRequest* internal_default_instance() {
    return reinterpret_cast<const Service_RegisterRequest*>(
               &_Service_RegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Service_RegisterRequest* other);
  friend void swap(Service_RegisterRequest& a, Service_RegisterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Service_RegisterRequest* New() const final {
    return CreateMaybeMessage<Service_RegisterRequest>(nullptr);
  }

  Service_RegisterRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Service_RegisterRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Service_RegisterRequest& from);
  void MergeFrom(const Service_RegisterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Service_RegisterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, int32> mServiceMap = 2;
  int mservicemap_size() const;
  void clear_mservicemap();
  static const int kMServiceMapFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
      mservicemap() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
      mutable_mservicemap();

  // int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.Service.RegisterRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      Service_RegisterRequest_MServiceMapEntry_DoNotUse,
      ::std::string, ::google::protobuf::int32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      0 > mservicemap_;
  ::google::protobuf::int64 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerCommon_2eproto;
};
// -------------------------------------------------------------------

class Service :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PB.Service) */ {
 public:
  Service();
  virtual ~Service();

  Service(const Service& from);

  inline Service& operator=(const Service& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Service(Service&& from) noexcept
    : Service() {
    *this = ::std::move(from);
  }

  inline Service& operator=(Service&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Service& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Service* internal_default_instance() {
    return reinterpret_cast<const Service*>(
               &_Service_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Service* other);
  friend void swap(Service& a, Service& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Service* New() const final {
    return CreateMaybeMessage<Service>(nullptr);
  }

  Service* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Service>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Service& from);
  void MergeFrom(const Service& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Service* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Service_NodeRegisterRequest NodeRegisterRequest;
  typedef Service_RegisterRequest RegisterRequest;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PB.Service)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerCommon_2eproto;
};
// -------------------------------------------------------------------

class ServiceData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PB.ServiceData) */ {
 public:
  ServiceData();
  virtual ~ServiceData();

  ServiceData(const ServiceData& from);

  inline ServiceData& operator=(const ServiceData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceData(ServiceData&& from) noexcept
    : ServiceData() {
    *this = ::std::move(from);
  }

  inline ServiceData& operator=(ServiceData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ServiceData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceData* internal_default_instance() {
    return reinterpret_cast<const ServiceData*>(
               &_ServiceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ServiceData* other);
  friend void swap(ServiceData& a, ServiceData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceData* New() const final {
    return CreateMaybeMessage<ServiceData>(nullptr);
  }

  ServiceData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServiceData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServiceData& from);
  void MergeFrom(const ServiceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string service_name = 3;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 3;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  #if LANG_CXX11
  void set_service_name(::std::string&& value);
  #endif
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);

  // string service_address = 4;
  void clear_service_address();
  static const int kServiceAddressFieldNumber = 4;
  const ::std::string& service_address() const;
  void set_service_address(const ::std::string& value);
  #if LANG_CXX11
  void set_service_address(::std::string&& value);
  #endif
  void set_service_address(const char* value);
  void set_service_address(const char* value, size_t size);
  ::std::string* mutable_service_address();
  ::std::string* release_service_address();
  void set_allocated_service_address(::std::string* service_address);

  // int32 adreId = 1;
  void clear_adreid();
  static const int kAdreIdFieldNumber = 1;
  ::google::protobuf::int32 adreid() const;
  void set_adreid(::google::protobuf::int32 value);

  // int32 service_id = 2;
  void clear_service_id();
  static const int kServiceIdFieldNumber = 2;
  ::google::protobuf::int32 service_id() const;
  void set_service_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PB.ServiceData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::internal::ArenaStringPtr service_address_;
  ::google::protobuf::int32 adreid_;
  ::google::protobuf::int32 service_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerCommon_2eproto;
};
// -------------------------------------------------------------------

class ServicesNotice :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PB.ServicesNotice) */ {
 public:
  ServicesNotice();
  virtual ~ServicesNotice();

  ServicesNotice(const ServicesNotice& from);

  inline ServicesNotice& operator=(const ServicesNotice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServicesNotice(ServicesNotice&& from) noexcept
    : ServicesNotice() {
    *this = ::std::move(from);
  }

  inline ServicesNotice& operator=(ServicesNotice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ServicesNotice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServicesNotice* internal_default_instance() {
    return reinterpret_cast<const ServicesNotice*>(
               &_ServicesNotice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ServicesNotice* other);
  friend void swap(ServicesNotice& a, ServicesNotice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServicesNotice* New() const final {
    return CreateMaybeMessage<ServicesNotice>(nullptr);
  }

  ServicesNotice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServicesNotice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServicesNotice& from);
  void MergeFrom(const ServicesNotice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServicesNotice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.ServiceData services = 1;
  int services_size() const;
  void clear_services();
  static const int kServicesFieldNumber = 1;
  ::PB::ServiceData* mutable_services(int index);
  ::google::protobuf::RepeatedPtrField< ::PB::ServiceData >*
      mutable_services();
  const ::PB::ServiceData& services(int index) const;
  ::PB::ServiceData* add_services();
  const ::google::protobuf::RepeatedPtrField< ::PB::ServiceData >&
      services() const;

  // @@protoc_insertion_point(class_scope:PB.ServicesNotice)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::PB::ServiceData > services_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerCommon_2eproto;
};
// -------------------------------------------------------------------

class UserRegisterData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PB.UserRegisterData) */ {
 public:
  UserRegisterData();
  virtual ~UserRegisterData();

  UserRegisterData(const UserRegisterData& from);

  inline UserRegisterData& operator=(const UserRegisterData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserRegisterData(UserRegisterData&& from) noexcept
    : UserRegisterData() {
    *this = ::std::move(from);
  }

  inline UserRegisterData& operator=(UserRegisterData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserRegisterData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserRegisterData* internal_default_instance() {
    return reinterpret_cast<const UserRegisterData*>(
               &_UserRegisterData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(UserRegisterData* other);
  friend void swap(UserRegisterData& a, UserRegisterData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserRegisterData* New() const final {
    return CreateMaybeMessage<UserRegisterData>(nullptr);
  }

  UserRegisterData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserRegisterData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserRegisterData& from);
  void MergeFrom(const UserRegisterData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRegisterData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string account = 1;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string platform = 4;
  void clear_platform();
  static const int kPlatformFieldNumber = 4;
  const ::std::string& platform() const;
  void set_platform(const ::std::string& value);
  #if LANG_CXX11
  void set_platform(::std::string&& value);
  #endif
  void set_platform(const char* value);
  void set_platform(const char* value, size_t size);
  ::std::string* mutable_platform();
  ::std::string* release_platform();
  void set_allocated_platform(::std::string* platform);

  // string device_mac = 5;
  void clear_device_mac();
  static const int kDeviceMacFieldNumber = 5;
  const ::std::string& device_mac() const;
  void set_device_mac(const ::std::string& value);
  #if LANG_CXX11
  void set_device_mac(::std::string&& value);
  #endif
  void set_device_mac(const char* value);
  void set_device_mac(const char* value, size_t size);
  ::std::string* mutable_device_mac();
  ::std::string* release_device_mac();
  void set_allocated_device_mac(::std::string* device_mac);

  // int64 phonenum = 3;
  void clear_phonenum();
  static const int kPhonenumFieldNumber = 3;
  ::google::protobuf::int64 phonenum() const;
  void set_phonenum(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.UserRegisterData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr platform_;
  ::google::protobuf::internal::ArenaStringPtr device_mac_;
  ::google::protobuf::int64 phonenum_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerCommon_2eproto;
};
// -------------------------------------------------------------------

class UserRegisterBack :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PB.UserRegisterBack) */ {
 public:
  UserRegisterBack();
  virtual ~UserRegisterBack();

  UserRegisterBack(const UserRegisterBack& from);

  inline UserRegisterBack& operator=(const UserRegisterBack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserRegisterBack(UserRegisterBack&& from) noexcept
    : UserRegisterBack() {
    *this = ::std::move(from);
  }

  inline UserRegisterBack& operator=(UserRegisterBack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserRegisterBack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserRegisterBack* internal_default_instance() {
    return reinterpret_cast<const UserRegisterBack*>(
               &_UserRegisterBack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(UserRegisterBack* other);
  friend void swap(UserRegisterBack& a, UserRegisterBack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserRegisterBack* New() const final {
    return CreateMaybeMessage<UserRegisterBack>(nullptr);
  }

  UserRegisterBack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserRegisterBack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserRegisterBack& from);
  void MergeFrom(const UserRegisterBack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRegisterBack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 3;
  void clear_token();
  static const int kTokenFieldNumber = 3;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // int64 player_id = 1;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  ::google::protobuf::int64 player_id() const;
  void set_player_id(::google::protobuf::int64 value);

  // int64 register_time = 2;
  void clear_register_time();
  static const int kRegisterTimeFieldNumber = 2;
  ::google::protobuf::int64 register_time() const;
  void set_register_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.UserRegisterBack)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::int64 player_id_;
  ::google::protobuf::int64 register_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerCommon_2eproto;
};
// -------------------------------------------------------------------

class UserAccountData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PB.UserAccountData) */ {
 public:
  UserAccountData();
  virtual ~UserAccountData();

  UserAccountData(const UserAccountData& from);

  inline UserAccountData& operator=(const UserAccountData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserAccountData(UserAccountData&& from) noexcept
    : UserAccountData() {
    *this = ::std::move(from);
  }

  inline UserAccountData& operator=(UserAccountData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UserAccountData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserAccountData* internal_default_instance() {
    return reinterpret_cast<const UserAccountData*>(
               &_UserAccountData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(UserAccountData* other);
  friend void swap(UserAccountData& a, UserAccountData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserAccountData* New() const final {
    return CreateMaybeMessage<UserAccountData>(nullptr);
  }

  UserAccountData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserAccountData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserAccountData& from);
  void MergeFrom(const UserAccountData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserAccountData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string account = 2;
  void clear_account();
  static const int kAccountFieldNumber = 2;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // string passwd = 3;
  void clear_passwd();
  static const int kPasswdFieldNumber = 3;
  const ::std::string& passwd() const;
  void set_passwd(const ::std::string& value);
  #if LANG_CXX11
  void set_passwd(::std::string&& value);
  #endif
  void set_passwd(const char* value);
  void set_passwd(const char* value, size_t size);
  ::std::string* mutable_passwd();
  ::std::string* release_passwd();
  void set_allocated_passwd(::std::string* passwd);

  // string platform = 4;
  void clear_platform();
  static const int kPlatformFieldNumber = 4;
  const ::std::string& platform() const;
  void set_platform(const ::std::string& value);
  #if LANG_CXX11
  void set_platform(::std::string&& value);
  #endif
  void set_platform(const char* value);
  void set_platform(const char* value, size_t size);
  ::std::string* mutable_platform();
  ::std::string* release_platform();
  void set_allocated_platform(::std::string* platform);

  // string devicemac = 6;
  void clear_devicemac();
  static const int kDevicemacFieldNumber = 6;
  const ::std::string& devicemac() const;
  void set_devicemac(const ::std::string& value);
  #if LANG_CXX11
  void set_devicemac(::std::string&& value);
  #endif
  void set_devicemac(const char* value);
  void set_devicemac(const char* value, size_t size);
  ::std::string* mutable_devicemac();
  ::std::string* release_devicemac();
  void set_allocated_devicemac(::std::string* devicemac);

  // string token = 9;
  void clear_token();
  static const int kTokenFieldNumber = 9;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // int64 userid = 1;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // int64 phonenum = 5;
  void clear_phonenum();
  static const int kPhonenumFieldNumber = 5;
  ::google::protobuf::int64 phonenum() const;
  void set_phonenum(::google::protobuf::int64 value);

  // int64 registertime = 7;
  void clear_registertime();
  static const int kRegistertimeFieldNumber = 7;
  ::google::protobuf::int64 registertime() const;
  void set_registertime(::google::protobuf::int64 value);

  // int64 lastlogintime = 8;
  void clear_lastlogintime();
  static const int kLastlogintimeFieldNumber = 8;
  ::google::protobuf::int64 lastlogintime() const;
  void set_lastlogintime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PB.UserAccountData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr passwd_;
  ::google::protobuf::internal::ArenaStringPtr platform_;
  ::google::protobuf::internal::ArenaStringPtr devicemac_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::int64 userid_;
  ::google::protobuf::int64 phonenum_;
  ::google::protobuf::int64 registertime_;
  ::google::protobuf::int64 lastlogintime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerCommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogicServerData

// int32 area_id = 1;
inline void LogicServerData::clear_area_id() {
  area_id_ = 0;
}
inline ::google::protobuf::int32 LogicServerData::area_id() const {
  // @@protoc_insertion_point(field_get:PB.LogicServerData.area_id)
  return area_id_;
}
inline void LogicServerData::set_area_id(::google::protobuf::int32 value) {
  
  area_id_ = value;
  // @@protoc_insertion_point(field_set:PB.LogicServerData.area_id)
}

// string server_name = 2;
inline void LogicServerData::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogicServerData::server_name() const {
  // @@protoc_insertion_point(field_get:PB.LogicServerData.server_name)
  return server_name_.GetNoArena();
}
inline void LogicServerData::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PB.LogicServerData.server_name)
}
#if LANG_CXX11
inline void LogicServerData::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PB.LogicServerData.server_name)
}
#endif
inline void LogicServerData::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PB.LogicServerData.server_name)
}
inline void LogicServerData::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PB.LogicServerData.server_name)
}
inline ::std::string* LogicServerData::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:PB.LogicServerData.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogicServerData::release_server_name() {
  // @@protoc_insertion_point(field_release:PB.LogicServerData.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogicServerData::set_allocated_server_name(::std::string* server_name) {
  if (server_name != nullptr) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:PB.LogicServerData.server_name)
}

// string server_ip = 3;
inline void LogicServerData::clear_server_ip() {
  server_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogicServerData::server_ip() const {
  // @@protoc_insertion_point(field_get:PB.LogicServerData.server_ip)
  return server_ip_.GetNoArena();
}
inline void LogicServerData::set_server_ip(const ::std::string& value) {
  
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PB.LogicServerData.server_ip)
}
#if LANG_CXX11
inline void LogicServerData::set_server_ip(::std::string&& value) {
  
  server_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PB.LogicServerData.server_ip)
}
#endif
inline void LogicServerData::set_server_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PB.LogicServerData.server_ip)
}
inline void LogicServerData::set_server_ip(const char* value, size_t size) {
  
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PB.LogicServerData.server_ip)
}
inline ::std::string* LogicServerData::mutable_server_ip() {
  
  // @@protoc_insertion_point(field_mutable:PB.LogicServerData.server_ip)
  return server_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogicServerData::release_server_ip() {
  // @@protoc_insertion_point(field_release:PB.LogicServerData.server_ip)
  
  return server_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogicServerData::set_allocated_server_ip(::std::string* server_ip) {
  if (server_ip != nullptr) {
    
  } else {
    
  }
  server_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_ip);
  // @@protoc_insertion_point(field_set_allocated:PB.LogicServerData.server_ip)
}

// int32 server_port = 4;
inline void LogicServerData::clear_server_port() {
  server_port_ = 0;
}
inline ::google::protobuf::int32 LogicServerData::server_port() const {
  // @@protoc_insertion_point(field_get:PB.LogicServerData.server_port)
  return server_port_;
}
inline void LogicServerData::set_server_port(::google::protobuf::int32 value) {
  
  server_port_ = value;
  // @@protoc_insertion_point(field_set:PB.LogicServerData.server_port)
}

// string server_token = 5;
inline void LogicServerData::clear_server_token() {
  server_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogicServerData::server_token() const {
  // @@protoc_insertion_point(field_get:PB.LogicServerData.server_token)
  return server_token_.GetNoArena();
}
inline void LogicServerData::set_server_token(const ::std::string& value) {
  
  server_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PB.LogicServerData.server_token)
}
#if LANG_CXX11
inline void LogicServerData::set_server_token(::std::string&& value) {
  
  server_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PB.LogicServerData.server_token)
}
#endif
inline void LogicServerData::set_server_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PB.LogicServerData.server_token)
}
inline void LogicServerData::set_server_token(const char* value, size_t size) {
  
  server_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PB.LogicServerData.server_token)
}
inline ::std::string* LogicServerData::mutable_server_token() {
  
  // @@protoc_insertion_point(field_mutable:PB.LogicServerData.server_token)
  return server_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogicServerData::release_server_token() {
  // @@protoc_insertion_point(field_release:PB.LogicServerData.server_token)
  
  return server_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogicServerData::set_allocated_server_token(::std::string* server_token) {
  if (server_token != nullptr) {
    
  } else {
    
  }
  server_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_token);
  // @@protoc_insertion_point(field_set_allocated:PB.LogicServerData.server_token)
}

// int32 logicAddress = 6;
inline void LogicServerData::clear_logicaddress() {
  logicaddress_ = 0;
}
inline ::google::protobuf::int32 LogicServerData::logicaddress() const {
  // @@protoc_insertion_point(field_get:PB.LogicServerData.logicAddress)
  return logicaddress_;
}
inline void LogicServerData::set_logicaddress(::google::protobuf::int32 value) {
  
  logicaddress_ = value;
  // @@protoc_insertion_point(field_set:PB.LogicServerData.logicAddress)
}

// -------------------------------------------------------------------

// LogicServerListData

// .PB.LogicServerData server_data = 1;
inline bool LogicServerListData::has_server_data() const {
  return this != internal_default_instance() && server_data_ != nullptr;
}
inline void LogicServerListData::clear_server_data() {
  if (GetArenaNoVirtual() == nullptr && server_data_ != nullptr) {
    delete server_data_;
  }
  server_data_ = nullptr;
}
inline const ::PB::LogicServerData& LogicServerListData::server_data() const {
  const ::PB::LogicServerData* p = server_data_;
  // @@protoc_insertion_point(field_get:PB.LogicServerListData.server_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::PB::LogicServerData*>(
      &::PB::_LogicServerData_default_instance_);
}
inline ::PB::LogicServerData* LogicServerListData::release_server_data() {
  // @@protoc_insertion_point(field_release:PB.LogicServerListData.server_data)
  
  ::PB::LogicServerData* temp = server_data_;
  server_data_ = nullptr;
  return temp;
}
inline ::PB::LogicServerData* LogicServerListData::mutable_server_data() {
  
  if (server_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::PB::LogicServerData>(GetArenaNoVirtual());
    server_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:PB.LogicServerListData.server_data)
  return server_data_;
}
inline void LogicServerListData::set_allocated_server_data(::PB::LogicServerData* server_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete server_data_;
  }
  if (server_data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      server_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, server_data, submessage_arena);
    }
    
  } else {
    
  }
  server_data_ = server_data;
  // @@protoc_insertion_point(field_set_allocated:PB.LogicServerListData.server_data)
}

// -------------------------------------------------------------------

// ServerRegisterBack

// repeated .PB.LogicServerData logic_srv_list = 1;
inline int ServerRegisterBack::logic_srv_list_size() const {
  return logic_srv_list_.size();
}
inline void ServerRegisterBack::clear_logic_srv_list() {
  logic_srv_list_.Clear();
}
inline ::PB::LogicServerData* ServerRegisterBack::mutable_logic_srv_list(int index) {
  // @@protoc_insertion_point(field_mutable:PB.ServerRegisterBack.logic_srv_list)
  return logic_srv_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::PB::LogicServerData >*
ServerRegisterBack::mutable_logic_srv_list() {
  // @@protoc_insertion_point(field_mutable_list:PB.ServerRegisterBack.logic_srv_list)
  return &logic_srv_list_;
}
inline const ::PB::LogicServerData& ServerRegisterBack::logic_srv_list(int index) const {
  // @@protoc_insertion_point(field_get:PB.ServerRegisterBack.logic_srv_list)
  return logic_srv_list_.Get(index);
}
inline ::PB::LogicServerData* ServerRegisterBack::add_logic_srv_list() {
  // @@protoc_insertion_point(field_add:PB.ServerRegisterBack.logic_srv_list)
  return logic_srv_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::LogicServerData >&
ServerRegisterBack::logic_srv_list() const {
  // @@protoc_insertion_point(field_list:PB.ServerRegisterBack.logic_srv_list)
  return logic_srv_list_;
}

// -------------------------------------------------------------------

// Service_NodeRegisterRequest

// int32 area_id = 1;
inline void Service_NodeRegisterRequest::clear_area_id() {
  area_id_ = 0;
}
inline ::google::protobuf::int32 Service_NodeRegisterRequest::area_id() const {
  // @@protoc_insertion_point(field_get:PB.Service.NodeRegisterRequest.area_id)
  return area_id_;
}
inline void Service_NodeRegisterRequest::set_area_id(::google::protobuf::int32 value) {
  
  area_id_ = value;
  // @@protoc_insertion_point(field_set:PB.Service.NodeRegisterRequest.area_id)
}

// int32 node_id = 2;
inline void Service_NodeRegisterRequest::clear_node_id() {
  node_id_ = 0;
}
inline ::google::protobuf::int32 Service_NodeRegisterRequest::node_id() const {
  // @@protoc_insertion_point(field_get:PB.Service.NodeRegisterRequest.node_id)
  return node_id_;
}
inline void Service_NodeRegisterRequest::set_node_id(::google::protobuf::int32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:PB.Service.NodeRegisterRequest.node_id)
}

// string node_address = 3;
inline void Service_NodeRegisterRequest::clear_node_address() {
  node_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Service_NodeRegisterRequest::node_address() const {
  // @@protoc_insertion_point(field_get:PB.Service.NodeRegisterRequest.node_address)
  return node_address_.GetNoArena();
}
inline void Service_NodeRegisterRequest::set_node_address(const ::std::string& value) {
  
  node_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PB.Service.NodeRegisterRequest.node_address)
}
#if LANG_CXX11
inline void Service_NodeRegisterRequest::set_node_address(::std::string&& value) {
  
  node_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PB.Service.NodeRegisterRequest.node_address)
}
#endif
inline void Service_NodeRegisterRequest::set_node_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PB.Service.NodeRegisterRequest.node_address)
}
inline void Service_NodeRegisterRequest::set_node_address(const char* value, size_t size) {
  
  node_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PB.Service.NodeRegisterRequest.node_address)
}
inline ::std::string* Service_NodeRegisterRequest::mutable_node_address() {
  
  // @@protoc_insertion_point(field_mutable:PB.Service.NodeRegisterRequest.node_address)
  return node_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Service_NodeRegisterRequest::release_node_address() {
  // @@protoc_insertion_point(field_release:PB.Service.NodeRegisterRequest.node_address)
  
  return node_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Service_NodeRegisterRequest::set_allocated_node_address(::std::string* node_address) {
  if (node_address != nullptr) {
    
  } else {
    
  }
  node_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_address);
  // @@protoc_insertion_point(field_set_allocated:PB.Service.NodeRegisterRequest.node_address)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Service_RegisterRequest

// int64 id = 1;
inline void Service_RegisterRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Service_RegisterRequest::id() const {
  // @@protoc_insertion_point(field_get:PB.Service.RegisterRequest.id)
  return id_;
}
inline void Service_RegisterRequest::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:PB.Service.RegisterRequest.id)
}

// map<string, int32> mServiceMap = 2;
inline int Service_RegisterRequest::mservicemap_size() const {
  return mservicemap_.size();
}
inline void Service_RegisterRequest::clear_mservicemap() {
  mservicemap_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
Service_RegisterRequest::mservicemap() const {
  // @@protoc_insertion_point(field_map:PB.Service.RegisterRequest.mServiceMap)
  return mservicemap_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
Service_RegisterRequest::mutable_mservicemap() {
  // @@protoc_insertion_point(field_mutable_map:PB.Service.RegisterRequest.mServiceMap)
  return mservicemap_.MutableMap();
}

// -------------------------------------------------------------------

// Service

// -------------------------------------------------------------------

// ServiceData

// int32 adreId = 1;
inline void ServiceData::clear_adreid() {
  adreid_ = 0;
}
inline ::google::protobuf::int32 ServiceData::adreid() const {
  // @@protoc_insertion_point(field_get:PB.ServiceData.adreId)
  return adreid_;
}
inline void ServiceData::set_adreid(::google::protobuf::int32 value) {
  
  adreid_ = value;
  // @@protoc_insertion_point(field_set:PB.ServiceData.adreId)
}

// int32 service_id = 2;
inline void ServiceData::clear_service_id() {
  service_id_ = 0;
}
inline ::google::protobuf::int32 ServiceData::service_id() const {
  // @@protoc_insertion_point(field_get:PB.ServiceData.service_id)
  return service_id_;
}
inline void ServiceData::set_service_id(::google::protobuf::int32 value) {
  
  service_id_ = value;
  // @@protoc_insertion_point(field_set:PB.ServiceData.service_id)
}

// string service_name = 3;
inline void ServiceData::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServiceData::service_name() const {
  // @@protoc_insertion_point(field_get:PB.ServiceData.service_name)
  return service_name_.GetNoArena();
}
inline void ServiceData::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PB.ServiceData.service_name)
}
#if LANG_CXX11
inline void ServiceData::set_service_name(::std::string&& value) {
  
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PB.ServiceData.service_name)
}
#endif
inline void ServiceData::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PB.ServiceData.service_name)
}
inline void ServiceData::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PB.ServiceData.service_name)
}
inline ::std::string* ServiceData::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:PB.ServiceData.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceData::release_service_name() {
  // @@protoc_insertion_point(field_release:PB.ServiceData.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceData::set_allocated_service_name(::std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:PB.ServiceData.service_name)
}

// string service_address = 4;
inline void ServiceData::clear_service_address() {
  service_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServiceData::service_address() const {
  // @@protoc_insertion_point(field_get:PB.ServiceData.service_address)
  return service_address_.GetNoArena();
}
inline void ServiceData::set_service_address(const ::std::string& value) {
  
  service_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PB.ServiceData.service_address)
}
#if LANG_CXX11
inline void ServiceData::set_service_address(::std::string&& value) {
  
  service_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PB.ServiceData.service_address)
}
#endif
inline void ServiceData::set_service_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PB.ServiceData.service_address)
}
inline void ServiceData::set_service_address(const char* value, size_t size) {
  
  service_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PB.ServiceData.service_address)
}
inline ::std::string* ServiceData::mutable_service_address() {
  
  // @@protoc_insertion_point(field_mutable:PB.ServiceData.service_address)
  return service_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServiceData::release_service_address() {
  // @@protoc_insertion_point(field_release:PB.ServiceData.service_address)
  
  return service_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServiceData::set_allocated_service_address(::std::string* service_address) {
  if (service_address != nullptr) {
    
  } else {
    
  }
  service_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_address);
  // @@protoc_insertion_point(field_set_allocated:PB.ServiceData.service_address)
}

// -------------------------------------------------------------------

// ServicesNotice

// repeated .PB.ServiceData services = 1;
inline int ServicesNotice::services_size() const {
  return services_.size();
}
inline void ServicesNotice::clear_services() {
  services_.Clear();
}
inline ::PB::ServiceData* ServicesNotice::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:PB.ServicesNotice.services)
  return services_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ServiceData >*
ServicesNotice::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:PB.ServicesNotice.services)
  return &services_;
}
inline const ::PB::ServiceData& ServicesNotice::services(int index) const {
  // @@protoc_insertion_point(field_get:PB.ServicesNotice.services)
  return services_.Get(index);
}
inline ::PB::ServiceData* ServicesNotice::add_services() {
  // @@protoc_insertion_point(field_add:PB.ServicesNotice.services)
  return services_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ServiceData >&
ServicesNotice::services() const {
  // @@protoc_insertion_point(field_list:PB.ServicesNotice.services)
  return services_;
}

// -------------------------------------------------------------------

// UserRegisterData

// string account = 1;
inline void UserRegisterData::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRegisterData::account() const {
  // @@protoc_insertion_point(field_get:PB.UserRegisterData.account)
  return account_.GetNoArena();
}
inline void UserRegisterData::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PB.UserRegisterData.account)
}
#if LANG_CXX11
inline void UserRegisterData::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PB.UserRegisterData.account)
}
#endif
inline void UserRegisterData::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PB.UserRegisterData.account)
}
inline void UserRegisterData::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PB.UserRegisterData.account)
}
inline ::std::string* UserRegisterData::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:PB.UserRegisterData.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRegisterData::release_account() {
  // @@protoc_insertion_point(field_release:PB.UserRegisterData.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRegisterData::set_allocated_account(::std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:PB.UserRegisterData.account)
}

// string password = 2;
inline void UserRegisterData::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRegisterData::password() const {
  // @@protoc_insertion_point(field_get:PB.UserRegisterData.password)
  return password_.GetNoArena();
}
inline void UserRegisterData::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PB.UserRegisterData.password)
}
#if LANG_CXX11
inline void UserRegisterData::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PB.UserRegisterData.password)
}
#endif
inline void UserRegisterData::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PB.UserRegisterData.password)
}
inline void UserRegisterData::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PB.UserRegisterData.password)
}
inline ::std::string* UserRegisterData::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:PB.UserRegisterData.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRegisterData::release_password() {
  // @@protoc_insertion_point(field_release:PB.UserRegisterData.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRegisterData::set_allocated_password(::std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:PB.UserRegisterData.password)
}

// int64 phonenum = 3;
inline void UserRegisterData::clear_phonenum() {
  phonenum_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 UserRegisterData::phonenum() const {
  // @@protoc_insertion_point(field_get:PB.UserRegisterData.phonenum)
  return phonenum_;
}
inline void UserRegisterData::set_phonenum(::google::protobuf::int64 value) {
  
  phonenum_ = value;
  // @@protoc_insertion_point(field_set:PB.UserRegisterData.phonenum)
}

// string platform = 4;
inline void UserRegisterData::clear_platform() {
  platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRegisterData::platform() const {
  // @@protoc_insertion_point(field_get:PB.UserRegisterData.platform)
  return platform_.GetNoArena();
}
inline void UserRegisterData::set_platform(const ::std::string& value) {
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PB.UserRegisterData.platform)
}
#if LANG_CXX11
inline void UserRegisterData::set_platform(::std::string&& value) {
  
  platform_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PB.UserRegisterData.platform)
}
#endif
inline void UserRegisterData::set_platform(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PB.UserRegisterData.platform)
}
inline void UserRegisterData::set_platform(const char* value, size_t size) {
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PB.UserRegisterData.platform)
}
inline ::std::string* UserRegisterData::mutable_platform() {
  
  // @@protoc_insertion_point(field_mutable:PB.UserRegisterData.platform)
  return platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRegisterData::release_platform() {
  // @@protoc_insertion_point(field_release:PB.UserRegisterData.platform)
  
  return platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRegisterData::set_allocated_platform(::std::string* platform) {
  if (platform != nullptr) {
    
  } else {
    
  }
  platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform);
  // @@protoc_insertion_point(field_set_allocated:PB.UserRegisterData.platform)
}

// string device_mac = 5;
inline void UserRegisterData::clear_device_mac() {
  device_mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRegisterData::device_mac() const {
  // @@protoc_insertion_point(field_get:PB.UserRegisterData.device_mac)
  return device_mac_.GetNoArena();
}
inline void UserRegisterData::set_device_mac(const ::std::string& value) {
  
  device_mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PB.UserRegisterData.device_mac)
}
#if LANG_CXX11
inline void UserRegisterData::set_device_mac(::std::string&& value) {
  
  device_mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PB.UserRegisterData.device_mac)
}
#endif
inline void UserRegisterData::set_device_mac(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PB.UserRegisterData.device_mac)
}
inline void UserRegisterData::set_device_mac(const char* value, size_t size) {
  
  device_mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PB.UserRegisterData.device_mac)
}
inline ::std::string* UserRegisterData::mutable_device_mac() {
  
  // @@protoc_insertion_point(field_mutable:PB.UserRegisterData.device_mac)
  return device_mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRegisterData::release_device_mac() {
  // @@protoc_insertion_point(field_release:PB.UserRegisterData.device_mac)
  
  return device_mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRegisterData::set_allocated_device_mac(::std::string* device_mac) {
  if (device_mac != nullptr) {
    
  } else {
    
  }
  device_mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_mac);
  // @@protoc_insertion_point(field_set_allocated:PB.UserRegisterData.device_mac)
}

// -------------------------------------------------------------------

// UserRegisterBack

// int64 player_id = 1;
inline void UserRegisterBack::clear_player_id() {
  player_id_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 UserRegisterBack::player_id() const {
  // @@protoc_insertion_point(field_get:PB.UserRegisterBack.player_id)
  return player_id_;
}
inline void UserRegisterBack::set_player_id(::google::protobuf::int64 value) {
  
  player_id_ = value;
  // @@protoc_insertion_point(field_set:PB.UserRegisterBack.player_id)
}

// int64 register_time = 2;
inline void UserRegisterBack::clear_register_time() {
  register_time_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 UserRegisterBack::register_time() const {
  // @@protoc_insertion_point(field_get:PB.UserRegisterBack.register_time)
  return register_time_;
}
inline void UserRegisterBack::set_register_time(::google::protobuf::int64 value) {
  
  register_time_ = value;
  // @@protoc_insertion_point(field_set:PB.UserRegisterBack.register_time)
}

// string token = 3;
inline void UserRegisterBack::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRegisterBack::token() const {
  // @@protoc_insertion_point(field_get:PB.UserRegisterBack.token)
  return token_.GetNoArena();
}
inline void UserRegisterBack::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PB.UserRegisterBack.token)
}
#if LANG_CXX11
inline void UserRegisterBack::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PB.UserRegisterBack.token)
}
#endif
inline void UserRegisterBack::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PB.UserRegisterBack.token)
}
inline void UserRegisterBack::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PB.UserRegisterBack.token)
}
inline ::std::string* UserRegisterBack::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:PB.UserRegisterBack.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRegisterBack::release_token() {
  // @@protoc_insertion_point(field_release:PB.UserRegisterBack.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRegisterBack::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:PB.UserRegisterBack.token)
}

// -------------------------------------------------------------------

// UserAccountData

// int64 userid = 1;
inline void UserAccountData::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 UserAccountData::userid() const {
  // @@protoc_insertion_point(field_get:PB.UserAccountData.userid)
  return userid_;
}
inline void UserAccountData::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:PB.UserAccountData.userid)
}

// string account = 2;
inline void UserAccountData::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserAccountData::account() const {
  // @@protoc_insertion_point(field_get:PB.UserAccountData.account)
  return account_.GetNoArena();
}
inline void UserAccountData::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PB.UserAccountData.account)
}
#if LANG_CXX11
inline void UserAccountData::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PB.UserAccountData.account)
}
#endif
inline void UserAccountData::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PB.UserAccountData.account)
}
inline void UserAccountData::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PB.UserAccountData.account)
}
inline ::std::string* UserAccountData::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:PB.UserAccountData.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserAccountData::release_account() {
  // @@protoc_insertion_point(field_release:PB.UserAccountData.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserAccountData::set_allocated_account(::std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:PB.UserAccountData.account)
}

// string passwd = 3;
inline void UserAccountData::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserAccountData::passwd() const {
  // @@protoc_insertion_point(field_get:PB.UserAccountData.passwd)
  return passwd_.GetNoArena();
}
inline void UserAccountData::set_passwd(const ::std::string& value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PB.UserAccountData.passwd)
}
#if LANG_CXX11
inline void UserAccountData::set_passwd(::std::string&& value) {
  
  passwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PB.UserAccountData.passwd)
}
#endif
inline void UserAccountData::set_passwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PB.UserAccountData.passwd)
}
inline void UserAccountData::set_passwd(const char* value, size_t size) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PB.UserAccountData.passwd)
}
inline ::std::string* UserAccountData::mutable_passwd() {
  
  // @@protoc_insertion_point(field_mutable:PB.UserAccountData.passwd)
  return passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserAccountData::release_passwd() {
  // @@protoc_insertion_point(field_release:PB.UserAccountData.passwd)
  
  return passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserAccountData::set_allocated_passwd(::std::string* passwd) {
  if (passwd != nullptr) {
    
  } else {
    
  }
  passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:PB.UserAccountData.passwd)
}

// string platform = 4;
inline void UserAccountData::clear_platform() {
  platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserAccountData::platform() const {
  // @@protoc_insertion_point(field_get:PB.UserAccountData.platform)
  return platform_.GetNoArena();
}
inline void UserAccountData::set_platform(const ::std::string& value) {
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PB.UserAccountData.platform)
}
#if LANG_CXX11
inline void UserAccountData::set_platform(::std::string&& value) {
  
  platform_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PB.UserAccountData.platform)
}
#endif
inline void UserAccountData::set_platform(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PB.UserAccountData.platform)
}
inline void UserAccountData::set_platform(const char* value, size_t size) {
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PB.UserAccountData.platform)
}
inline ::std::string* UserAccountData::mutable_platform() {
  
  // @@protoc_insertion_point(field_mutable:PB.UserAccountData.platform)
  return platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserAccountData::release_platform() {
  // @@protoc_insertion_point(field_release:PB.UserAccountData.platform)
  
  return platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserAccountData::set_allocated_platform(::std::string* platform) {
  if (platform != nullptr) {
    
  } else {
    
  }
  platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform);
  // @@protoc_insertion_point(field_set_allocated:PB.UserAccountData.platform)
}

// int64 phonenum = 5;
inline void UserAccountData::clear_phonenum() {
  phonenum_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 UserAccountData::phonenum() const {
  // @@protoc_insertion_point(field_get:PB.UserAccountData.phonenum)
  return phonenum_;
}
inline void UserAccountData::set_phonenum(::google::protobuf::int64 value) {
  
  phonenum_ = value;
  // @@protoc_insertion_point(field_set:PB.UserAccountData.phonenum)
}

// string devicemac = 6;
inline void UserAccountData::clear_devicemac() {
  devicemac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserAccountData::devicemac() const {
  // @@protoc_insertion_point(field_get:PB.UserAccountData.devicemac)
  return devicemac_.GetNoArena();
}
inline void UserAccountData::set_devicemac(const ::std::string& value) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PB.UserAccountData.devicemac)
}
#if LANG_CXX11
inline void UserAccountData::set_devicemac(::std::string&& value) {
  
  devicemac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PB.UserAccountData.devicemac)
}
#endif
inline void UserAccountData::set_devicemac(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PB.UserAccountData.devicemac)
}
inline void UserAccountData::set_devicemac(const char* value, size_t size) {
  
  devicemac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PB.UserAccountData.devicemac)
}
inline ::std::string* UserAccountData::mutable_devicemac() {
  
  // @@protoc_insertion_point(field_mutable:PB.UserAccountData.devicemac)
  return devicemac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserAccountData::release_devicemac() {
  // @@protoc_insertion_point(field_release:PB.UserAccountData.devicemac)
  
  return devicemac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserAccountData::set_allocated_devicemac(::std::string* devicemac) {
  if (devicemac != nullptr) {
    
  } else {
    
  }
  devicemac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicemac);
  // @@protoc_insertion_point(field_set_allocated:PB.UserAccountData.devicemac)
}

// int64 registertime = 7;
inline void UserAccountData::clear_registertime() {
  registertime_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 UserAccountData::registertime() const {
  // @@protoc_insertion_point(field_get:PB.UserAccountData.registertime)
  return registertime_;
}
inline void UserAccountData::set_registertime(::google::protobuf::int64 value) {
  
  registertime_ = value;
  // @@protoc_insertion_point(field_set:PB.UserAccountData.registertime)
}

// int64 lastlogintime = 8;
inline void UserAccountData::clear_lastlogintime() {
  lastlogintime_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 UserAccountData::lastlogintime() const {
  // @@protoc_insertion_point(field_get:PB.UserAccountData.lastlogintime)
  return lastlogintime_;
}
inline void UserAccountData::set_lastlogintime(::google::protobuf::int64 value) {
  
  lastlogintime_ = value;
  // @@protoc_insertion_point(field_set:PB.UserAccountData.lastlogintime)
}

// string token = 9;
inline void UserAccountData::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserAccountData::token() const {
  // @@protoc_insertion_point(field_get:PB.UserAccountData.token)
  return token_.GetNoArena();
}
inline void UserAccountData::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PB.UserAccountData.token)
}
#if LANG_CXX11
inline void UserAccountData::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PB.UserAccountData.token)
}
#endif
inline void UserAccountData::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PB.UserAccountData.token)
}
inline void UserAccountData::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PB.UserAccountData.token)
}
inline ::std::string* UserAccountData::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:PB.UserAccountData.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserAccountData::release_token() {
  // @@protoc_insertion_point(field_release:PB.UserAccountData.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserAccountData::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:PB.UserAccountData.token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PB

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_ServerCommon_2eproto
